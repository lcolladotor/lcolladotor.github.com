<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rOpenSci | L. Collado-Torres</title>
    <link>https://lcolladotor.github.io/tag/ropensci/</link>
      <atom:link href="https://lcolladotor.github.io/tag/ropensci/index.xml" rel="self" type="application/rss+xml" />
    <description>rOpenSci</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 27 Apr 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://lcolladotor.github.io/media/icon_hu2b32c4ab415f12f472f73c7b0301b0d1_19400_512x512_fill_lanczos_center_3.png</url>
      <title>rOpenSci</title>
      <link>https://lcolladotor.github.io/tag/ropensci/</link>
    </image>
    
    <item>
      <title>Getting ready to attend rOpenSci unconf18 and probably working on tidyverse-like functions for the first time</title>
      <link>https://lcolladotor.github.io/2018/04/27/ropensci-unconf18-and-working-on-tidyverse-like-functions-for-the-first-time/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://lcolladotor.github.io/2018/04/27/ropensci-unconf18-and-working-on-tidyverse-like-functions-for-the-first-time/</guid>
      <description>&lt;p&gt;It‚Äôs Friday 7pm and it‚Äôs been a long week with ups and downs&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. But I‚Äôm enthused as I write this blog post. In less than a month from now I‚Äôll be attending &lt;a href=&#34;http://unconf18.ropensci.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rOpenSci unconf18&lt;/a&gt; and it‚Äôll be my first time at this type of event. Yay!&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Building on my streak of good news, I&amp;#39;m delighted to have been selected to attend &lt;a href=&#34;https://twitter.com/rOpenSci?ref_src=twsrc%5Etfw&#34;&gt;@rOpenSci&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Unconf18?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Unconf18&lt;/a&gt; &lt;a href=&#34;https://t.co/Xe6lojB7TS&#34;&gt;https://t.co/Xe6lojB7TS&lt;/a&gt; ^_^ Also, thanks to the &lt;a href=&#34;https://t.co/o5OwUWEaBD&#34;&gt;https://t.co/o5OwUWEaBD&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/LieberInstitute?ref_src=twsrc%5Etfw&#34;&gt;@LieberInstitute&lt;/a&gt; for their support! I&amp;#39;m hoping to relay as much as I can to &lt;a href=&#34;https://twitter.com/LIBDrstats?ref_src=twsrc%5Etfw&#34;&gt;@LIBDrstats&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt;&lt;/p&gt;&amp;mdash; üá≤üáΩ Leonardo Collado-Torres (@lcolladotor) &lt;a href=&#34;https://twitter.com/lcolladotor/status/983876013015826432?ref_src=twsrc%5Etfw&#34;&gt;April 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;In my self introduction to everyone attending, I mentioned that I don‚Äôt use the pipe (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) symbol and that I use &lt;code&gt;&amp;lt;-&lt;/code&gt; for assignment.&lt;/p&gt;
&lt;img src=&#34;http://lcolladotor.github.io/post/2018-04-27-getting-ready-to-attend-ropensci-unconf18-and-probably-working-on-tidyverse-like-functions-for-the-first-time_files/Screen%20Shot%202018-04-27%20at%207.11.14%20PM.png&#34; width=&#34;600&#34; /&gt;
Recently I had my pre-unconf chat with [Stefanie Butland](https://ropensci.org/about/#team) (read more about these chats [in her great blog post](https://blog.trelliscience.com/the-value-of-welcome-part-2-how-to-prepare-40-new-community-members-for-an-unconference/)). In my notes to Stefanie before our chat I had mentioned again my lack of R piping experience and we talked about it. As we talked, it became clear that a blog post on related topics would be useful. Sure, I could have asked directly to the other unconf18 participants, but maybe others from the R community in general can chime in or benefit from reading the answers.
&lt;h3 id=&#34;coding-style-and-git&#34;&gt;Coding style and git&lt;/h3&gt;
&lt;p&gt;I‚Äôm attending unconf18 with an open mind and I think of myself as someone who can be quite flexible (not with my body!) and accommodating. I‚Äôm assuming that most participants at unconf18 will use &lt;code&gt;=&lt;/code&gt; for assignment. I‚Äôm not looking to start any discussions about the different assignment operators. Simply, I am willing to use whatever the majority uses. Just like I did in my first pull request to the &lt;code&gt;blogdown&lt;/code&gt; package (&lt;a href=&#34;https://github.com/rstudio/blogdown/pull/263&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue 263&lt;/a&gt;). I was trying to follow Yihui Xie‚Äôs coding style to make his life easier and have a clean (or cleaner) git history. From &lt;a href=&#34;https://yihui.name/en/2018/02/bite-sized-pull-requests/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yihui‚Äôs post on this pull request&lt;/a&gt; I can see that he liked it.&lt;/p&gt;
&lt;p&gt;Keeping this in mind, I think that following the coding style of others will be something I‚Äôll do at unconf18. I haven‚Äôt really worked in any R packages with many developers actively working on the package. But I imagine that setting a common coding style will minimize git conflicts, and &lt;strong&gt;no one&lt;/strong&gt; wants those&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. I don‚Äôt know if we‚Äôll all follow some common guidelines at unconf18. I actually imagine that it‚Äôll be project-specific. Why? Well because you can create an R project in RStudio&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; and set some defaults for the project such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the number of spaces for tab&lt;/li&gt;
&lt;li&gt;line ending conversions&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;http://lcolladotor.github.io/post/2018-04-27-getting-ready-to-attend-ropensci-unconf18-and-probably-working-on-tidyverse-like-functions-for-the-first-time_files/Screen%20Shot%202018-04-27%20at%207.27.27%20PM.png&#34; width=&#34;400&#34; /&gt;
&lt;p&gt;We can also set some global RStudio preferences like whether to &lt;em&gt;auto-indent code after paste&lt;/em&gt;, length of lines.&lt;/p&gt;
&lt;img src=&#34;http://lcolladotor.github.io/post/2018-04-27-getting-ready-to-attend-ropensci-unconf18-and-probably-working-on-tidyverse-like-functions-for-the-first-time_files/Screen%20Shot%202018-04-27%20at%207.28.49%20PM.png&#34; width=&#34;400&#34; /&gt;
Additionally, we can decide whether we‚Äôll use the RStudio ‚Äúwand‚Äù to *reformat code*.
&lt;img src=&#34;http://lcolladotor.github.io/post/2018-04-27-getting-ready-to-attend-ropensci-unconf18-and-probably-working-on-tidyverse-like-functions-for-the-first-time_files/Screen%20Shot%202018-04-27%20at%207.31.29%20PM.png&#34; width=&#34;300&#34; /&gt;
&lt;p&gt;Maybe all of this is unnecessary, maybe everyone will work in different non-overlapping functions and thus avoid git conflicts. For example, at my job sometimes I write code with &lt;code&gt;=&lt;/code&gt; users, but we don‚Äôt work on the same lines of the code file. Later on it becomes easy to identify who wrote which line without having to use &lt;code&gt;git blame&lt;/code&gt; (awful name, right?).&lt;/p&gt;
&lt;h3 id=&#34;tidyverse-like-functions&#34;&gt;Tidyverse-like functions&lt;/h3&gt;
&lt;p&gt;So far, I think that these coding style issues are minor and will be easily dealt with. I think that we‚Äôll all be able to adapt and instead focus on other problems (like whatever the package is trying to solve) and enjoy the experience (network, build &lt;strong&gt;trust&lt;/strong&gt; as Stefanie put it).&lt;/p&gt;
&lt;p&gt;My second concern has to do with something I imagine could require more effort: my homework before the unconf. That is, writing tidyverse-like functions. Like I‚Äôve said, I haven‚Äôt used the R pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt; symbol. I‚Äôve executed some code with it before, seeing it in many blog posts, but I‚Äôve never actually written functions designed to be compatible with this type of logic.&lt;/p&gt;
&lt;p&gt;If I help write a function that is not pipe-friendly, then it might not integrate nicely with other functions written by the rest of the team. It would lead to workarounds in the vignette or maybe having someone else re-factor my first function to make it pipe-friendly. Sure, I would learn from observing others make changes to my code. But I want to take advantage as much as I can from my experience at rOpenSci unconf&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;!&lt;/p&gt;
&lt;p&gt;Since I don‚Äôt really use &lt;code&gt;%&amp;gt;%&lt;/code&gt;, I‚Äôm unfamiliar with many things related to pipe-friendly (tidyverse-like) functions. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you document them differently? Like make a single Rd file for multiple functions. Or do you make an Rd file per function even if the example usage doesn‚Äôt involve &lt;code&gt;%&amp;gt;%&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;I know that the first argument is important in pipe-friendly functions. But I ignore if the second and other arguments play a role or not.&lt;/li&gt;
&lt;li&gt;Do people use the ellipsis (&lt;code&gt;...&lt;/code&gt;) argument in pipe-friendly functions? With my &lt;em&gt;&lt;a href=&#34;https://bioconductor.org/packages/3.17/derfinder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;derfinder&lt;/a&gt;&lt;/em&gt; package I ended up a very deep rabbit hole using &lt;code&gt;...&lt;/code&gt;. I explained some of the logic in my &lt;code&gt;dots&lt;/code&gt; &lt;a href=&#34;http://lcolladotor.github.io/2014/12/11/dots/#.WuO4-VMvy50&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blog post&lt;/a&gt; (there are fair criticisms to going deep with &lt;code&gt;...&lt;/code&gt; in the comments).&lt;/li&gt;
&lt;li&gt;How do you write unit tests for pipe-friendly functions? Similar to how you write documentation for them, do the unit tests just test one function a time or do they test several at a time (that is the output after using &lt;code&gt;%&amp;gt;%&lt;/code&gt;)?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These and other questions could involve time getting familiar with. Time that I could spend now, before unconf18, learning and at least getting a better sense of what to expect. Maybe I‚Äôm complicating myself and worrying too much about this. I imagine that the solution will involve a combination of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking some popular tidyverse packages that use &lt;code&gt;%&amp;gt;%&lt;/code&gt;. Like the vignettes/README files and examples.&lt;/li&gt;
&lt;li&gt;Reading more about this in a book(s): I don‚Äôt know which one though.&lt;/li&gt;
&lt;li&gt;Playing around a bit as a user with some of these functions. See what error messages pop up: actually I don‚Äôt know how users debug a series of functions tied together via &lt;code&gt;%&amp;gt;%&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h3&gt;
&lt;p&gt;I‚Äôm not saying everyone should learn about these topics before unconf18. I think that we are all (well, maybe excluding some) worried about not knowing &lt;code&gt;\(X\)&lt;/code&gt; or &lt;code&gt;\(Y\)&lt;/code&gt; &lt;code&gt;R&lt;/code&gt;/&lt;code&gt;git&lt;/code&gt;/&lt;code&gt;travis&lt;/code&gt;/&lt;code&gt;testthat&lt;/code&gt;/&lt;code&gt;usethis&lt;/code&gt;/etc topic before unconf18. And that will part of why it‚Äôll be great to meet everyone in what is known to be an extremely welcoming R conference ^^ (seriously, check &lt;a href=&#34;https://ropensci.org/blog/2017/06/02/unconf2017/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;all the unconf17 posts&lt;/a&gt;!).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## And I&amp;#39;m done proofreading the post. Yay!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;Sys.time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2023-07-11 16:54:21 EDT&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;acknowledgments&#34;&gt;Acknowledgments&lt;/h3&gt;
&lt;p&gt;This blog post was made possible thanks to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://bioconductor.org/packages/3.17/BiocStyle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BiocStyle&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Oles_2023&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://bioconductor.org/packages/BiocStyle&#39;&gt;Ole≈õ, 2023&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=blogdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blogdown&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Xie_2017&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://bookdown.org/yihui/blogdown/&#39;&gt;Xie, Hill, and Thomas, 2017&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=devtools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;devtools&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Wickham_2022&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://CRAN.R-project.org/package=devtools&#39;&gt;Wickham, Hester, Chang, and Bryan, 2022&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=knitcitations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;knitcitations&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Boettiger_2021&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://CRAN.R-project.org/package=knitcitations&#39;&gt;Boettiger, 2021&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Boettiger_2021&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Boettiger_2021&#34;&gt;\[1\]&lt;/a&gt;&lt;cite&gt;
C. Boettiger.
&lt;em&gt;knitcitations: Citations for ‚ÄòKnitr‚Äô Markdown Files&lt;/em&gt;.
R package version 1.0.12.
2021.
URL: &lt;a href=&#34;https://CRAN.R-project.org/package=knitcitations&#34;&gt;https://CRAN.R-project.org/package=knitcitations&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Oles_2023&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Oles_2023&#34;&gt;\[2\]&lt;/a&gt;&lt;cite&gt;
A. Ole≈õ.
&lt;em&gt;BiocStyle: Standard styles for vignettes and other Bioconductor documents&lt;/em&gt;.
R package version 2.28.0.
2023.
DOI: &lt;a href=&#34;https://doi.org/10.18129/B9.bioc.BiocStyle&#34;&gt;10.18129/B9.bioc.BiocStyle&lt;/a&gt;.
URL: &lt;a href=&#34;https://bioconductor.org/packages/BiocStyle&#34;&gt;https://bioconductor.org/packages/BiocStyle&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Wickham_2022&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Wickham_2022&#34;&gt;\[3\]&lt;/a&gt;&lt;cite&gt;
H. Wickham, J. Hester, W. Chang, and J. Bryan.
&lt;em&gt;devtools: Tools to Make Developing R Packages Easier&lt;/em&gt;.
R package version 2.4.5.
2022.
URL: &lt;a href=&#34;https://CRAN.R-project.org/package=devtools&#34;&gt;https://CRAN.R-project.org/package=devtools&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Xie_2017&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Xie_2017&#34;&gt;\[4\]&lt;/a&gt;&lt;cite&gt;
Y. Xie, A. P. Hill, and A. Thomas.
&lt;em&gt;blogdown: Creating Websites with R Markdown&lt;/em&gt;.
Boca Raton, Florida: Chapman and Hall/CRC, 2017.
ISBN: 978-0815363729.
URL: &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;https://bookdown.org/yihui/blogdown/&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;h3 id=&#34;reproducibility&#34;&gt;Reproducibility&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;## ‚îÄ Session info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
##  setting  value
##  version  R version 4.3.1 (2023-06-16)
##  os       macOS Ventura 13.4
##  system   aarch64, darwin20
##  ui       X11
##  language (EN)
##  collate  en_US.UTF-8
##  ctype    en_US.UTF-8
##  tz       America/New_York
##  date     2023-07-11
##  pandoc   3.1.5 @ /opt/homebrew/bin/ (via rmarkdown)
## 
## ‚îÄ Packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
##  package       * version    date (UTC) lib source
##  backports       1.4.1      2021-12-13 [1] CRAN (R 4.3.0)
##  bibtex          0.5.1      2023-01-26 [1] CRAN (R 4.3.0)
##  BiocManager     1.30.21    2023-06-10 [1] CRAN (R 4.3.0)
##  BiocStyle     * 2.28.0     2023-04-25 [1] Bioconductor
##  blogdown        1.18       2023-06-19 [1] CRAN (R 4.3.0)
##  bookdown        0.34       2023-05-09 [1] CRAN (R 4.3.0)
##  bslib           0.5.0      2023-06-09 [1] CRAN (R 4.3.0)
##  cachem          1.0.8      2023-05-01 [1] CRAN (R 4.3.0)
##  callr           3.7.3      2022-11-02 [1] CRAN (R 4.3.0)
##  cli             3.6.1      2023-03-23 [1] CRAN (R 4.3.0)
##  colorout        1.2-2      2023-05-06 [1] Github (jalvesaq/colorout@79931fd)
##  crayon          1.5.2      2022-09-29 [1] CRAN (R 4.3.0)
##  devtools      * 2.4.5      2022-10-11 [1] CRAN (R 4.3.0)
##  digest          0.6.31     2022-12-11 [1] CRAN (R 4.3.0)
##  ellipsis        0.3.2      2021-04-29 [1] CRAN (R 4.3.0)
##  evaluate        0.21       2023-05-05 [1] CRAN (R 4.3.0)
##  fastmap         1.1.1      2023-02-24 [1] CRAN (R 4.3.0)
##  fs              1.6.2      2023-04-25 [1] CRAN (R 4.3.0)
##  generics        0.1.3      2022-07-05 [1] CRAN (R 4.3.0)
##  glue            1.6.2      2022-02-24 [1] CRAN (R 4.3.0)
##  htmltools       0.5.5      2023-03-23 [1] CRAN (R 4.3.0)
##  htmlwidgets     1.6.2      2023-03-17 [1] CRAN (R 4.3.0)
##  httpuv          1.6.11     2023-05-11 [1] CRAN (R 4.3.0)
##  httr            1.4.6      2023-05-08 [1] CRAN (R 4.3.0)
##  jquerylib       0.1.4      2021-04-26 [1] CRAN (R 4.3.0)
##  jsonlite        1.8.7      2023-06-29 [1] CRAN (R 4.3.0)
##  knitcitations * 1.0.12     2021-01-10 [1] CRAN (R 4.3.0)
##  knitr           1.43       2023-05-25 [1] CRAN (R 4.3.0)
##  later           1.3.1      2023-05-02 [1] CRAN (R 4.3.0)
##  lifecycle       1.0.3      2022-10-07 [1] CRAN (R 4.3.0)
##  lubridate       1.9.2      2023-02-10 [1] CRAN (R 4.3.0)
##  magrittr        2.0.3      2022-03-30 [1] CRAN (R 4.3.0)
##  memoise         2.0.1      2021-11-26 [1] CRAN (R 4.3.0)
##  mime            0.12       2021-09-28 [1] CRAN (R 4.3.0)
##  miniUI          0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)
##  pkgbuild        1.4.2      2023-06-26 [1] CRAN (R 4.3.0)
##  pkgload         1.3.2      2022-11-16 [1] CRAN (R 4.3.0)
##  plyr            1.8.8      2022-11-11 [1] CRAN (R 4.3.0)
##  prettyunits     1.1.1      2020-01-24 [1] CRAN (R 4.3.0)
##  processx        3.8.2      2023-06-30 [1] CRAN (R 4.3.0)
##  profvis         0.3.8      2023-05-02 [1] CRAN (R 4.3.0)
##  promises        1.2.0.1    2021-02-11 [1] CRAN (R 4.3.0)
##  ps              1.7.5      2023-04-18 [1] CRAN (R 4.3.0)
##  purrr           1.0.1      2023-01-10 [1] CRAN (R 4.3.0)
##  R6              2.5.1      2021-08-19 [1] CRAN (R 4.3.0)
##  Rcpp            1.0.10     2023-01-22 [1] CRAN (R 4.3.0)
##  RefManageR      1.4.0      2022-09-30 [1] CRAN (R 4.3.0)
##  remotes         2.4.2      2021-11-30 [1] CRAN (R 4.3.0)
##  rlang           1.1.1      2023-04-28 [1] CRAN (R 4.3.0)
##  rmarkdown       2.23       2023-07-01 [1] CRAN (R 4.3.0)
##  rstudioapi      0.14       2022-08-22 [1] CRAN (R 4.3.0)
##  sass            0.4.6.9000 2023-05-06 [1] Github (rstudio/sass@f248fe5)
##  sessioninfo     1.2.2      2021-12-06 [1] CRAN (R 4.3.0)
##  shiny           1.7.4      2022-12-15 [1] CRAN (R 4.3.0)
##  stringi         1.7.12     2023-01-11 [1] CRAN (R 4.3.0)
##  stringr         1.5.0      2022-12-02 [1] CRAN (R 4.3.0)
##  timechange      0.2.0      2023-01-11 [1] CRAN (R 4.3.0)
##  urlchecker      1.0.1      2021-11-30 [1] CRAN (R 4.3.0)
##  usethis       * 2.2.1      2023-06-23 [1] CRAN (R 4.3.0)
##  vctrs           0.6.3      2023-06-14 [1] CRAN (R 4.3.0)
##  xfun            0.39       2023-04-20 [1] CRAN (R 4.3.0)
##  xml2            1.3.4      2023-04-27 [1] CRAN (R 4.3.0)
##  xtable          1.8-4      2019-04-21 [1] CRAN (R 4.3.0)
##  yaml            2.3.7      2023-01-23 [1] CRAN (R 4.3.0)
## 
##  [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library
## 
## ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Feeling welcomed can be hard‚Ä¶ oh well.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;We could talk about git for a long time too. But I hope that I‚Äôll get by with some git push, git pull, and maybe git branch.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;It‚Äôs one of the sponsors &lt;a href=&#34;http://unconf18.ropensci.org/#sponsors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://unconf18.ropensci.org/#sponsors&lt;/a&gt; and well, probably want most will be using since it has such nice tools for writing R packages.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;Specially since most only attend one unconf, I think. So it‚Äôs different from other conferences that you can experience multiple years and network with the group across a longer period of time: that‚Äôs what I‚Äôve done with the Bioconductor meetings.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
