<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git | L. Collado-Torres</title>
    <link>https://lcolladotor.github.io/tags/git/</link>
      <atom:link href="https://lcolladotor.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <description>Git</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2011-2020. All thoughts and opinions here are my own. The icon was designed by [Mauricio Guzmán](https://www.linkedin.com/in/mauricio-guzman-6529b551/) and is inspired by [Huichol culture](https://en.wikipedia.org/wiki/Huichol); it represents my community building interests</copyright><lastBuildDate>Wed, 18 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://lcolladotor.github.io/images/icon_hu2b32c4ab415f12f472f73c7b0301b0d1_19400_512x512_fill_lanczos_center_2.png</url>
      <title>Git</title>
      <link>https://lcolladotor.github.io/tags/git/</link>
    </image>
    
    <item>
      <title>You just committed a large file and can&#39;t push to GitHub</title>
      <link>https://lcolladotor.github.io/2020/03/18/you-just-committed-a-large-file-and-can-t-push-to-github/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://lcolladotor.github.io/2020/03/18/you-just-committed-a-large-file-and-can-t-push-to-github/</guid>
      <description>


&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Oh ohh! 😱 What do you do now?
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The data me and my colleagues work with is typically too big for our personal computers, so we use a high performance computing environment (cluster) and mostly interact with it through the command line terminal. As you might know, I’m a big fan of version control and I use &lt;a href=&#34;https://git-scm.com/&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt; plus &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; for sharing our code &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. That’s why I’ve been advocating others to use it for a while and when they do, they run to me if they have some issues. A while back, my former student &lt;a href=&#34;https://lcolladotor.github.io/authors/apeterson/&#34;&gt;Amy Peterson&lt;/a&gt; wrote a blog post titled &lt;a href=&#34;http://research.libd.org/rstatsclub/post/git-to-know-git/&#34;&gt;git to know git: an 8 minute introduction&lt;/a&gt; which is useful if you are getting started. Amy also links to the excellent &lt;a href=&#34;https://happygitwithr.com/&#34;&gt;Happy Git and GitHub for the useR&lt;/a&gt; book.&lt;/p&gt;
&lt;div id=&#34;recurrent-problem-you-just-commited-a-large-file-and-cant-push-to-github&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Recurrent problem: you just commited a large file and can’t push to GitHub&lt;/h3&gt;
&lt;p&gt;One situation that I’ve frequently helped others with is when they use &lt;code&gt;git add *&lt;/code&gt; or &lt;code&gt;git add .&lt;/code&gt; and version control &lt;em&gt;every&lt;/em&gt; file in their project. They then do a commit such as &lt;code&gt;git commit -m &#34;added all files&#34;&lt;/code&gt; and run &lt;code&gt;git push&lt;/code&gt; to sync their files to GitHub. But oops, GitHub complains that you are trying to commit files larger than 50 Mb and even grinds to a halt if they are larger than 100 Mb. Which given that we work with large data, happens frequently (even a PDF file can be that big!).&lt;/p&gt;
&lt;p&gt;Ok, so what can you do at this point? Remember, this is the scenario where you &lt;strong&gt;just&lt;/strong&gt; made that commit. That is, it’s the last commit. At that point, it’s best to &lt;em&gt;undo your last git commit&lt;/em&gt; which is well described in &lt;a href=&#34;https://www.git-tower.com/learn/git/faq/undo-last-commit&#34;&gt;this website&lt;/a&gt;. However, when you &lt;em&gt;undo&lt;/em&gt; a commit, you can either fully wipe out any changes (wipe them out fully from your disk, not only &lt;code&gt;git&lt;/code&gt;’s version control!) or undo the version control step but also keep your files intact. The main solution then is to use:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git reset --soft HEAD~1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, maybe you tried other commands and it’s a bit more complicated than that. Which is why I greatly advise that you create a local backup of your &lt;code&gt;main_project&lt;/code&gt; directory before you dive into commands such as &lt;code&gt;git reset&lt;/code&gt;, specially whenever you see the &lt;code&gt;--hard&lt;/code&gt; option being suggested. That is, do something like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;## Nagivate to the parent directory of your main_project
cd directory_containing_your_project

## Check the full size of your project directory
du -sh main_project

## Do you have enough disk space?
df -h .

## If you have enough disk space, then create a full backup
cp -r main_project main_project_backup/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you are able to roll back the offending commit, instead of running &lt;code&gt;git add *&lt;/code&gt; or &lt;code&gt;git add .&lt;/code&gt; and similar commands, repeat the following cycle:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Check which files are not being version controlled (untracked) with &lt;code&gt;git status&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Check how big each of your untracked files is. You can do so with &lt;code&gt;ls -lh&lt;/code&gt; and &lt;code&gt;ls -lh some_pattern&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the files or file patterns you want to avoid version controlling (the large files) to your &lt;code&gt;.gitignore&lt;/code&gt; file &lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Double check that your pattern worked by confirming that these files do not show up as &lt;em&gt;untracked&lt;/em&gt; when you run &lt;code&gt;git status&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Repeat this until the only remaining untracked files are those you actually want to version control and that are small enough &lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And that’s it! Keep version controlling your code and reap the benefits later on when you need to.&lt;/p&gt;
&lt;iframe src=&#34;https://giphy.com/embed/KEXly2BwaldSlhY8BL&#34; width=&#34;480&#34; height=&#34;480&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;a href=&#34;https://giphy.com/gifs/latenightseth-seth-meyers-lnsm-late-night-with-KEXly2BwaldSlhY8BL&#34;&gt;via GIPHY&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;We all run into this situation at some point (or multiple times), so please keep using version control. The benefits will outweigh the negatives!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;use-case-story-the-issue&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Use case story: the issue&lt;/h3&gt;
&lt;p&gt;Thanks to a colleague who gave me permission to share their use case, here we can dive down into a real life example. First, this was their description (edited for anonymity):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ran these, as per GitHub’s instructions, and it went fine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git init
git add README.md
git commit -m &amp;quot;first commit&amp;quot;
git remote add origin git@github.com:LieberInstitute/some_repository.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Even added a &lt;code&gt;.gitignore&lt;/code&gt; with some instructions on what to ignore when committing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;But it wasn’t enough and I hadn’t come to appreciate yet that there’s no need to commit &lt;code&gt;.rda&lt;/code&gt;’s or other very large files, so my &lt;code&gt;git push&lt;/code&gt; died.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Since these were already staged, I thought the next move was to make another commit with an edited &lt;code&gt;.gitignore&lt;/code&gt; listing anything in my &lt;code&gt;rdas/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Putting me two branches ahead of master (Leo: commits I think)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I got frustrated and thought then that ok, I want to go back two commits…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;my Googling suggested me to go for &lt;code&gt;git reset --hard HEAD~2&lt;/code&gt;…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;That’s when I started panicking 😭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My colleague started panicking at this point because they couldn’t see the files anymore. That is, running &lt;code&gt;ls -lh rdas/&lt;/code&gt; didn’t list the files they had worked on really hard to create over the past months. But at this point, these large files were under version control by &lt;code&gt;git&lt;/code&gt; &lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;, just not available on &lt;code&gt;GitHub&lt;/code&gt; due to the file size limitations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So then my panic Googling took me to &lt;a href=&#34;https://stackoverflow.com/questions/5788037/recover-from-git-reset-hard&#34; class=&#34;uri&#34;&gt;https://stackoverflow.com/questions/5788037/recover-from-git-reset-hard&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;where I thought ok I just can run &lt;code&gt;git reset HEAD@{2}&lt;/code&gt; , which was&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;7cb9bac HEAD@{0}: reset: moving to HEAD@{2}
1e8499d HEAD@{1}: reset: moving to HEAD~2
f03b884 HEAD@{2}: commit: Committing EVERYTHING
7cb9bac HEAD@{3}: commit: Commiting EVERYTHING          &amp;lt;- this one
1e8499d HEAD@{4}: commit (initial): first commit&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;And there it looked like not everything was quite lost, as I could see&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ git status
# On branch master
# Your branch is ahead of &amp;#39;origin/master&amp;#39; by 1 commit.
#   (use &amp;quot;git push&amp;quot; to publish your local commits)
#
# Changes not staged for commit:
#   (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
#
#   deleted:    .RData
#   deleted:    .gitignore
#   deleted:    *.R ## Lots of files with this pattern
#   deleted:    *.sh ## same story about the file pattern
#   deleted:    pdfs/*.pdf
#   deleted:    rdas/*.rda
#   deleted:    tables/*.csv
#
# Untracked files:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
#
#   logs/
#   pdfs/*other*.pdf
#   rdas/*other*.rda
#   *other*.R
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now my colleague realizes that somehow &lt;code&gt;git&lt;/code&gt; is version controlling the files, but the &lt;code&gt;deleted&lt;/code&gt; label is still VERY scary!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And then I thought ok I just need to re-stage those deleted files…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;So I ran &lt;code&gt;git add -A&lt;/code&gt; , but now I see&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ git status
# On branch master
# Your branch is ahead of &amp;#39;origin/master&amp;#39; by 1 commit.
#   (use &amp;quot;git push&amp;quot; to publish your local commits)
#
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#   deleted:    .RData
#   deleted:    .gitignore
#   deleted:    *.R ## Lots of files with this pattern
#   deleted:    *.sh ## same story about the file pattern
#   deleted:    pdfs/*.pdf
#   deleted:    rdas/*.rda
#   deleted:    tables/*.csv
#   new file:   logs/*.Rout
#   new file:   logs/*.sh.*
#   new file:   pdfs/*other*.pdf
#   new file:   rdas/*other*.rda
#   new file:   *other*.R
#   renamed:    pdfs/*something*.pdf -&amp;gt; pdfs/*something_else*.pdf
#   renamed:    rdas/*something*.rda -&amp;gt; rdas/*something_else*.rda&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;and clearly I don’t know what I’m doing so I stopped&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;And thanked the lord you were online. 😭😭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I promise I did some reviewing of resources and testing with local and JHPCE test dirs before&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My colleague then pointed me to the directory with the files and we fixed their files.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;use-case-story-the-solution&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Use case story: the solution&lt;/h3&gt;
&lt;p&gt;Like I mentioned earlier, the first thing to do in cases like this is to create a backup.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;## Check how big it is
du -sh project_FINAL

## Create a backup
cp -r project_FINAL project_leo_backup/

## To wipe out the original copy
## proceed with EXTREME caution!
# rm -fr project_FINAL

## Then restore everything from your backup copy
cp -r project_leo_backup project_FINAL/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I actually messed up at one point and had to rely on this backup!! So, like I said,&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Please backup everything before you start using &lt;code&gt;git reset&lt;/code&gt; and similar commands!
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Next, to undo all the &lt;code&gt;git rm&lt;/code&gt; (deleting a file), I undid the &lt;code&gt;git add -A&lt;/code&gt; step using a combination of &lt;code&gt;git reset&lt;/code&gt; and &lt;code&gt;git checkout&lt;/code&gt; (to restore files).&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# https://stackoverflow.com/a/2125713/9374370
$ git reset HEAD
$ git checkout .

## check things
$ git status
On branch master
Your branch is ahead of &amp;#39;origin/master&amp;#39; by 1 commit.
  (use &amp;quot;git push&amp;quot; to publish your local commits)
nothing to commit, working tree clean
$ git log
commit 7cb9bac5378500b35a0c22480a5961248ecf67ea (HEAD -&amp;gt; master)
Author: xx &amp;lt;xx@jhmi.edu&amp;gt;
Date:   Tue Mar 17 19:27:31 2020 -0400
    Commiting EVERYTHING
commit 1e8499d7d41cab6c12ea23ccdb2da8120b00a7f7 (origin/master)
Author: XX &amp;lt;xx@jhmi.edu&amp;gt;
Date:   Tue Mar 17 19:04:03 2020 -0400
    first commit

$ ls -lh rdas
total 6.2G
## I see tons of stuff (many of which I&amp;#39;m now the &amp;quot;owner&amp;quot; of)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I then finally used &lt;code&gt;git reset --soft&lt;/code&gt; to undo the last commit.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# https://www.git-tower.com/learn/git/faq/undo-last-commit
git reset --soft HEAD~1 ## note that I&amp;#39;m not using --hard

## Everything is back to before that big commit
$ git log
commit 1e8499d7d41cab6c12ea23ccdb2da8120b00a7f7 (HEAD -&amp;gt; master, origin/master)
Author: XX &amp;lt;xx@jhmi.edu&amp;gt;
Date:   Tue Mar 17 19:04:03 2020 -0400
    first commit

## and the files are there =)
$ ls -lh rdas
total 6.2G
-rwxrwx--- 1 lcollado lieber_jaffe 690M Mar 18 00:22 *.rda ## exmaple file&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the directory and files have been restored to before all files were committed, we can proceed to ignore large files. For example, we can ignore the &lt;code&gt;rdas/&lt;/code&gt; directory that has many large files that we don’t want to version control &lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ git status
On branch master
Your branch is up to date with &amp;#39;origin/master&amp;#39;.

Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git restore &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
    modified:   README.md

Untracked files:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
    .RData
    .gitignore
    *.R ## Lots of files with this pattern
    *.sh ## Lots of files with this pattern
    pdfs/
    rdas/
    tables/

$ echo &amp;quot;rdas&amp;quot; &amp;gt;&amp;gt; .gitignore

## Notice that rdas is not there anymore ^^
$ git status
On branch master
Your branch is up to date with &amp;#39;origin/master&amp;#39;.

Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git restore &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
    modified:   README.md

Untracked files:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
    .RData
    .gitignore
    *.R ## Lots of files with this pattern
    *.sh ## Lots of files with this pattern
    pdfs/
    tables/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can update our &lt;code&gt;.gitignore&lt;/code&gt; and push this small change (ignoring the &lt;code&gt;rdas/&lt;/code&gt; directory) to GitHub.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ git add .gitignore

$ git commit -m &amp;quot;Ignore rdas&amp;quot;
[master 52f1850] Ignore rdas
 1 file changed, 14 insertions(+)
 create mode 100755 .gitignore

$ git push
X11 forwarding request failed on channel 0
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 20 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 420 bytes | 210.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To github.com:LieberInstitute/some_repository.git
   1e8499d..52f1850  master -&amp;gt; master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we are done!&lt;/p&gt;
&lt;iframe src=&#34;https://giphy.com/embed/wzD3nQPA4gqHK&#34; width=&#34;480&#34; height=&#34;360&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;a href=&#34;https://giphy.com/gifs/time-office-wzD3nQPA4gqHK&#34;&gt;via GIPHY&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;And I’ll get some free beers hehe 🍻😄&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Omg you’re amazing beautiful lord n savior jesus christ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Your next 10 beers are on me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;plus 2 for the promotion 😄😇😎🙏😭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To which I replied&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hehe, I’ve simply only have had more practice at this than you (fixing xx’s repos mostly hehe)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;but yeah, backing up is the best thing you can do&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;that actually &lt;strong&gt;saved&lt;/strong&gt; me from my one &lt;code&gt;git reset --hard HEAD~1&lt;/code&gt; command that should have &lt;code&gt;been git reset --soft HEAD~1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;misc-notes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Misc notes&lt;/h3&gt;
&lt;p&gt;Note that you might also want to use &lt;code&gt;git status-size&lt;/code&gt; in some situations.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;## From https://github.com/jtloong/git-status-size
$ git status-size&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, if you are a &lt;a href=&#34;https://jhpce.jhu.edu/&#34;&gt;JHPCE&lt;/a&gt; user, I recommend including these lines in your &lt;code&gt;~/.bashrc&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;## Load the git module by default when qrsh/qsub
## thanks to Jiong Yang
if [[ $HOSTNAME == compute-* ]]; then
    echo &amp;quot;Adding LIBD modules&amp;quot;
    module use /jhpce/shared/jhpce/modulefiles/libd
    echo &amp;quot;Loading git&amp;quot;
    module load git
    module load git-status-size/github
    module load git-lfs/2.8.0
    module load rmate/1.5.9 ## macOS users
    module load conda_R/3.6.x ## default R version
fi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;acknowledgments&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Acknowledgments&lt;/h3&gt;
&lt;p&gt;I greatly appreciate the anonymous user who reached out to me about this issue and had an excellent history of commands which allowed me to figure out a possible solution and then write this blog post (with their permission). We both hope that this information will be useful to ourselves and others in the future.&lt;/p&gt;
&lt;p&gt;This blog post was made possible thanks to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://bioconductor.org/packages/3.10/BiocStyle&#34;&gt;BiocStyle&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Oles_2020&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://github.com/Bioconductor/BiocStyle&#39;&gt;Oleś, Morgan, and Huber, 2020&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=blogdown&#34;&gt;blogdown&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Xie_2017&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://github.com/rstudio/blogdown&#39;&gt;Xie, Hill, and Thomas, 2017&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=knitcitations&#34;&gt;knitcitations&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Boettiger_2019&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://CRAN.R-project.org/package=knitcitations&#39;&gt;Boettiger, 2019&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=sessioninfo&#34;&gt;sessioninfo&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Csardi_2018&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://CRAN.R-project.org/package=sessioninfo&#39;&gt;Csárdi, core, Wickham, Chang, et al., 2018&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Boettiger_2019&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Boettiger_2019&#34;&gt;[1]&lt;/a&gt;&lt;cite&gt;
C. Boettiger.
&lt;em&gt;knitcitations: Citations for ‘Knitr’ Markdown Files&lt;/em&gt;.
R package version 1.0.10.
2019.
URL: &lt;a href=&#34;https://CRAN.R-project.org/package=knitcitations&#34;&gt;https://CRAN.R-project.org/package=knitcitations&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Csardi_2018&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Csardi_2018&#34;&gt;[2]&lt;/a&gt;&lt;cite&gt;
G. Csárdi, R. core, H. Wickham, W. Chang, et al.
&lt;em&gt;sessioninfo: R Session Information&lt;/em&gt;.
R package version 1.1.1.
2018.
URL: &lt;a href=&#34;https://CRAN.R-project.org/package=sessioninfo&#34;&gt;https://CRAN.R-project.org/package=sessioninfo&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Oles_2020&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Oles_2020&#34;&gt;[3]&lt;/a&gt;&lt;cite&gt;
A. Oleś, M. Morgan, and W. Huber.
&lt;em&gt;BiocStyle: Standard styles for vignettes and other Bioconductor documents&lt;/em&gt;.
R package version 2.14.4.
2020.
URL: &lt;a href=&#34;https://github.com/Bioconductor/BiocStyle&#34;&gt;https://github.com/Bioconductor/BiocStyle&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Xie_2017&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Xie_2017&#34;&gt;[4]&lt;/a&gt;&lt;cite&gt;
Y. Xie, A. P. Hill, and A. Thomas.
&lt;em&gt;blogdown: Creating Websites with R Markdown&lt;/em&gt;.
ISBN 978-0815363729.
Boca Raton, Florida: Chapman and Hall/CRC, 2017.
URL: &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;https://github.com/rstudio/blogdown&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reproducibility&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reproducibility&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;## ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────
##  setting  value                       
##  version  R version 3.6.3 (2020-02-29)
##  os       macOS Catalina 10.15.3      
##  system   x86_64, darwin15.6.0        
##  ui       X11                         
##  language (EN)                        
##  collate  en_US.UTF-8                 
##  ctype    en_US.UTF-8                 
##  tz       America/New_York            
##  date     2020-03-18                  
## 
## ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────
##  package       * version date       lib source                            
##  assertthat      0.2.1   2019-03-21 [1] CRAN (R 3.6.0)                    
##  bibtex          0.4.2.2 2020-01-02 [1] CRAN (R 3.6.0)                    
##  BiocManager     1.30.10 2019-11-16 [1] CRAN (R 3.6.1)                    
##  BiocStyle     * 2.14.4  2020-01-09 [1] Bioconductor                      
##  blogdown        0.18    2020-03-04 [1] CRAN (R 3.6.0)                    
##  bookdown        0.18    2020-03-05 [1] CRAN (R 3.6.0)                    
##  cli             2.0.2   2020-02-28 [1] CRAN (R 3.6.0)                    
##  colorout      * 1.2-1   2019-05-07 [1] Github (jalvesaq/colorout@7ea9440)
##  crayon          1.3.4   2017-09-16 [1] CRAN (R 3.6.0)                    
##  digest          0.6.25  2020-02-23 [1] CRAN (R 3.6.0)                    
##  evaluate        0.14    2019-05-28 [1] CRAN (R 3.6.0)                    
##  fansi           0.4.1   2020-01-08 [1] CRAN (R 3.6.0)                    
##  glue            1.3.2   2020-03-12 [1] CRAN (R 3.6.0)                    
##  htmltools       0.4.0   2019-10-04 [1] CRAN (R 3.6.0)                    
##  httr            1.4.1   2019-08-05 [1] CRAN (R 3.6.0)                    
##  jsonlite        1.6.1   2020-02-02 [1] CRAN (R 3.6.0)                    
##  knitcitations * 1.0.10  2019-09-15 [1] CRAN (R 3.6.0)                    
##  knitr           1.28    2020-02-06 [1] CRAN (R 3.6.0)                    
##  lubridate       1.7.4   2018-04-11 [1] CRAN (R 3.6.0)                    
##  magrittr        1.5     2014-11-22 [1] CRAN (R 3.6.0)                    
##  plyr            1.8.6   2020-03-03 [1] CRAN (R 3.6.2)                    
##  R6              2.4.1   2019-11-12 [1] CRAN (R 3.6.1)                    
##  Rcpp            1.0.3   2019-11-08 [1] CRAN (R 3.6.0)                    
##  RefManageR      1.2.12  2019-04-03 [1] CRAN (R 3.6.0)                    
##  rlang           0.4.5   2020-03-01 [1] CRAN (R 3.6.0)                    
##  rmarkdown       2.1     2020-01-20 [1] CRAN (R 3.6.0)                    
##  sessioninfo   * 1.1.1   2018-11-05 [1] CRAN (R 3.6.0)                    
##  stringi         1.4.6   2020-02-17 [1] CRAN (R 3.6.0)                    
##  stringr         1.4.0   2019-02-10 [1] CRAN (R 3.6.0)                    
##  withr           2.1.2   2018-03-15 [1] CRAN (R 3.6.0)                    
##  xfun            0.12    2020-01-13 [1] CRAN (R 3.6.0)                    
##  xml2            1.2.5   2020-03-11 [1] CRAN (R 3.6.0)                    
##  yaml            2.2.1   2020-02-01 [1] CRAN (R 3.6.0)                    
## 
## [1] /Library/Frameworks/R.framework/Versions/3.6/Resources/library&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Between our personal computers and the JHPCE cluster, but also with collaborators and the community at large.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Note that you can also create &lt;code&gt;.gitignore&lt;/code&gt; files inside each directory if you want to have tighter control. You could also ignore a full directory and the use &lt;code&gt;git add -f&lt;/code&gt; to forcibly version control files, for example, &lt;code&gt;echo &#34;my_subdir&#34; &amp;gt;&amp;gt; .gitignore&lt;/code&gt; plus &lt;code&gt;git add -f my_subdir/*.R&lt;/code&gt; to forcibly version control the R script files inside &lt;code&gt;my_subdir&lt;/code&gt; but ignore everything else.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;If you really want to version control large files, look into &lt;a href=&#34;https://git-lfs.github.com/&#34;&gt;&lt;code&gt;git lfs&lt;/code&gt;&lt;/a&gt;.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;Stored and hidden in some way inside the &lt;code&gt;.git&lt;/code&gt; directory.&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;Maybe later we’ll version control a few of them using &lt;code&gt;git add -f rdas/some_file.rda&lt;/code&gt; but it’ll be a targeted version control command.&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sharing my work for &#34;Advanced Methods III&#34;</title>
      <link>https://lcolladotor.github.io/2013/02/13/sharing-my-work-for-advanced-methods-iii/</link>
      <pubDate>Wed, 13 Feb 2013 00:00:00 +0000</pubDate>
      <guid>https://lcolladotor.github.io/2013/02/13/sharing-my-work-for-advanced-methods-iii/</guid>
      <description>&lt;p&gt;This semester I&amp;#8217;m taking the live version of the Data Analysis class by Jeff Leek. His more &lt;a href=&#34;https://class.coursera.org/dataanalysis-001/class/index&#34;&gt;popular version of the course is available through Coursera&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;One of the things that Jeff promotes is reproducibility and sharing code. I share that tendency and thus created a Git repository for my homework and code for the class: &lt;a href=&#34;http://bit.ly/12vSk7d&#34;&gt;lcollado753&lt;/a&gt;. I&amp;#8217;m hosting it with GitHub to try it out since I started with Mercurial via Bitbucket. &lt;/p&gt;
&lt;p&gt;Part of me would love it if everyone in the class had their own Git repositories. I mean, this class involves lots of practice exercises and there are plenty of R packages and functions that others use that I would like to learn. As I don&amp;#8217;t see this happening, I think that it would be great to list the packages/functions you think could be interesting to others at the end of the write-ups. However, this involves sharing the reports and I don&amp;#8217;t know if that will happen.&lt;/p&gt;
&lt;p&gt;But maybe I didn&amp;#8217;t get the instructions Jeff gave correctly the first time. Listening into his week 2 talks from the Coursera course, I get that he wants our reports to be reproducible. The idea is great, but sometimes I get lots in the technicalities of finding the best fit for our situation. Aka, something we can all do that is worth the time for small scale projects that we have a couple of days to complete and most likely will be finishing the day before they are due. For now we might stick to sharing zip files with the report + summarized data set (it has be small enough to be sharable by email).&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m pretty happy with hosting my stuff at GitHub. One blunder I made in the&lt;a href=&#34;https://github.com/lcolladotor/lcollado753/blob/master/hw/data-analysis-01/report/data01_lcollado.pdf&#34;&gt; first data analysis report&lt;/a&gt; is that I completely forgot to say in it that I have the code in GitHub :P Oh well, next time!&lt;/p&gt;
&lt;p&gt;I feel that I also have lots to improve regarding how to tell a story in a report. Plus, for this first project I mainly did some exploratory data analysis without much stat analysis.&lt;/p&gt;
&lt;p&gt;Overall, I&amp;#8217;m quite excited with this course =) and I think that I&amp;#8217;ll learn a ton on methods to analyze data AND how to actually implement them. Plus, I&amp;#8217;m currently trying to learn ggplot2 as you can see in that first report. Also, I made it with knitr instead of Sweave =)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bitbucket revamped</title>
      <link>https://lcolladotor.github.io/2012/10/09/bitbucket-revamped/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>
      <guid>https://lcolladotor.github.io/2012/10/09/bitbucket-revamped/</guid>
      <description>&lt;p&gt;Bitbucket announced their new &amp;#8220;look&amp;#8221; today. The goal is to make it more team friendly but I guess that they also wanted to make it look fresh.&lt;/p&gt;
&lt;p&gt;For example, the overview page now has a quick summary:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_mbn7ffEV281qfs0hy.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt; That can be useful coupled with the simpler navigation tabs. But I think that the best of the new tools is the ability to comment at a given commit at any line change.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_mbn7i8XOGJ1qfs0hy.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt;This gives a new dimension when working with a team. It&amp;#8217;s independent of the version control system you are using, so this can be a drawback in a sense as you need to log into Bitbucket to see the comments. I guess that if you keep the main explanations inside commit messages, this new comment tool can be helpful when reviewing the code and/or solving merges.&lt;/p&gt;
&lt;p&gt;Bitbucket thought about how to make these comments more visible, so they show as updates in the overview page. That&amp;#8217;s great, otherwise you would have to go to each commit and check if there is anything new out there. Plus, there is an RSS feed for those of us that prefer to use these instead of browsing to a webpage to check if there is an update.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_mbn7osWZpp1qfs0hy.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt;To foment the discussion when solving merges, they also have some new tools inside the &amp;#8220;pull requests&amp;#8221;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_mbn7m2Oprf1qfs0hy.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt;Overall, these changes make me happy and want to stay with Bitbucket. Though most of my collaborators use Github and the idea of having to get a new account is a HUGE wall. You wouldn&amp;#8217;t think it is after having accounts for lots of other stuff, right? &lt;/p&gt;
&lt;p&gt;Well, remember that you can log into Bitbucket using OpenID:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_mbn7vlYQYO1qfs0hy.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;3 Bitbucket&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Git while making your academic webpage</title>
      <link>https://lcolladotor.github.io/2012/09/24/introducing-git-while-making-your-academic-webpage/</link>
      <pubDate>Mon, 24 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://lcolladotor.github.io/2012/09/24/introducing-git-while-making-your-academic-webpage/</guid>
      <description>&lt;p&gt;Last week I gave a presentation during our computing club on how to use git (a version control system). I used as a motivating example the first steps of creating your own academic webpage. The goal was to make it interesting to both new students (who might have been more interested on the webpage part) and older students (for whom version control should be a must). The slides and all the material is publicly available through the following Bitbucket repository: &lt;a href=&#34;https://bitbucket.org/lcolladotor/html_git_intro/overview&#34;&gt;&lt;a href=&#34;https://bitbucket.org/lcolladotor/html_git_intro/overview&#34;&gt;https://bitbucket.org/lcolladotor/html_git_intro/overview&lt;/a&gt;&lt;/a&gt;. You can access the slides by clicking on &amp;#8220;Source&amp;#8221;, &amp;#8220;slides&amp;#8221; and then &amp;#8220;html_git.pdf&amp;#8221;.&lt;/p&gt;
&lt;p&gt;For the talk, I tried to make it more interactive but at the same time I wanted to make sure that the material could work for reference in the future. For example, I added a &lt;em&gt;commands.txt&lt;/em&gt; file so anyone following me could easily copy-paste the commands. By the way, for Git Bash in Windows, you paste stuff by using the insert key instead of the usual &amp;#8220;ctrl + v&amp;#8221; shortcut.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m posting about it as it could be useful to other people, so feel free to share it.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Version control: need to learn Git</title>
      <link>https://lcolladotor.github.io/2012/09/05/i-consider-myself-a-fan-of-using-version-control/</link>
      <pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://lcolladotor.github.io/2012/09/05/i-consider-myself-a-fan-of-using-version-control/</guid>
      <description>&lt;iframe width=&#34;400&#34; height=&#34;225&#34; src=&#34;http://www.youtube.com/embed/4fsSyLkBdB4?rel0&#34; frameborder=&#34;0&#34; &gt;&lt;/iframe&gt;&lt;br/&gt;&lt;p&gt;I consider myself a fan of using version control for bioinformatics/biostatistics (or any text based, like code) project. Yet my knowledge of version control systems is quite limited. I&amp;#8217;ve used Mercurial for some time, but I haven&amp;#8217;t ventured much beyond the basic commands and some GUIs for merging.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t recall how it all went, but I remember reading that &lt;a href=&#34;http://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt; (SVN) was much better than &lt;a href=&#34;http://www.nongnu.org/cvs/&#34;&gt;CVS&lt;/a&gt;. Also, the &lt;a href=&#34;http://www.bioconductor.org/&#34;&gt;Bioconductor project&lt;/a&gt; uses SVN. Before that I really learnt how to use SVN, someone from the Bioconductor devel list pointed me to &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;/&lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;. Around the same time I read &amp;#8220;&lt;a href=&#34;http://www.ncbi.nlm.nih.gov/pubmed/19649301&#34;&gt;A quick guide to organizing computational biology projects&lt;/a&gt;&#34; by William Noble, which further convinced me to start using a version control system. I &#34;educated&#34; (a tiny bit) myself on the topic with Wikipedia&amp;#8217;s entries on &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34;&gt;revision control&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Distributed_revision_control&#34;&gt;distributed revision control&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wasn&amp;#8217;t sure whether to use Mercurial or Git, but at the time &lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; only supported Mercurial repositories. It felt pretty easy to use, specially after reading the &lt;a href=&#34;http://mercurial.selenic.com/guide/&#34;&gt;guide&lt;/a&gt; whose examples covered pretty much all I needed. By the way, I highly recommend using Bitbucket now (whether for Mercurial or Git repositories) as they offer unlimited private repositories to anyone with an academic email account.&lt;/p&gt;
&lt;p&gt;Now for my Advanced Methods class by &lt;a href=&#34;http://www.bcaffo.com/&#34;&gt;Brian Caffo&lt;/a&gt; (check out his &lt;a href=&#34;https://www.coursera.org/course/biostats&#34;&gt;Mathematical Biostatistics Boot Camp&lt;/a&gt; Coursera free online course) I need to learn how to use Git. That lead me to check some Git vs Mercurial posts such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://blogs.atlassian.com/2012/03/git-vs-mercurial-why-git/&#34;&gt;Git vs Mercurial: Why Git?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.atlassian.com/2012/02/mercurial-vs-git-why-mercurial/?utm_source=wac-dvcs&amp;amp;utm_medium=text&amp;amp;utm_content=dvcs-options-git-or-mercurial&#34;&gt;Git vs Mercurial: Why Mercurial?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Curiosity and another reason lead me to watch the &lt;a href=&#34;http://youtu.be/4fsSyLkBdB4&#34;&gt;video&lt;/a&gt; from above. It helped me to understand the basic differences between Git and Mercurial, plus it reassured me that skipping SVN was a good thing. I might still need to learn SVN properly, but at least through Git-SVN or HgSubversion it seems that I can dodge the bullet.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll come back once I&amp;#8217;ve tried out Git, but for now it seems that &lt;a href=&#34;http://sourcetreeapp.com/&#34;&gt;SourceTree&lt;/a&gt; will be a great tool to have. It works with Bitbucket and &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; (free for open source, gotta pay for private repositories).&lt;/p&gt;
&lt;p&gt;To finish this post, if you are new to the topic you should check out:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://blogs.atlassian.com/2012/02/version-control-diffs-patches/?utm_source=wac-dvcs&amp;amp;utm_medium=text&amp;amp;utm_content=what-is-version-control&#34;&gt;What is Version Control: Diff and Patches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.atlassian.com/2012/02/version-control-centralized-dvcs/?utm_source=wac-dvcs&amp;amp;utm_medium=text&amp;amp;utm_content=what-is-version-control&#34;&gt;What is Version Control: Centralized vs DVCS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Well, even without knowing much about these tools you probably already use some kind of version history thanks to Dropbox and Google Docs. &lt;/p&gt;
&lt;p&gt;PS I found lots of stuff &lt;a href=&#34;http://www.atlassian.com/dvcs/overview/what-is-version-control&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
