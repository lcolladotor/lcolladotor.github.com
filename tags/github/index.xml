<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github | L. Collado-Torres</title>
    <link>/tags/github/</link>
      <atom:link href=http://lcolladotor.github.io/tags/github/index.xml rel="self" type="application/rss+xml" />
    <description>github</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2011-2020. All thoughts and opinions here are my own. The icon was designed by [Mauricio Guzmán](https://www.linkedin.com/in/mauricio-guzman-6529b551/) and is inspired by [Huichol culture](https://en.wikipedia.org/wiki/Huichol); it represents my community building interests</copyright><lastBuildDate>Wed, 18 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu2b32c4ab415f12f472f73c7b0301b0d1_19400_512x512_fill_lanczos_center_2.png</url>
      <title>github</title>
      <link>/tags/github/</link>
    </image>
    
    <item>
      <title>You just committed a large file and can&#39;t push to GitHub</title>
      <link>/2020/03/18/you-just-committed-a-large-file-and-can-t-push-to-github/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/2020/03/18/you-just-committed-a-large-file-and-can-t-push-to-github/</guid>
      <description>


&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Oh ohh! 😱 What do you do now?
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The data me and my colleagues work with is typically too big for our personal computers, so we use a high performance computing environment (cluster) and mostly interact with it through the command line terminal. As you might know, I’m a big fan of version control and I use &lt;a href=&#34;https://git-scm.com/&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt; plus &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; for sharing our code &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. That’s why I’ve been advocating others to use it for a while and when they do, they run to me if they have some issues. A while back, my former student &lt;a href=&#34;/authors/apeterson/&#34;&gt;Amy Peterson&lt;/a&gt; wrote a blog post titled &lt;a href=&#34;http://research.libd.org/rstatsclub/post/git-to-know-git/&#34;&gt;git to know git: an 8 minute introduction&lt;/a&gt; which is useful if you are getting started. Amy also links to the excellent &lt;a href=&#34;https://happygitwithr.com/&#34;&gt;Happy Git and GitHub for the useR&lt;/a&gt; book.&lt;/p&gt;
&lt;div id=&#34;recurrent-problem-you-just-commited-a-large-file-and-cant-push-to-github&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Recurrent problem: you just commited a large file and can’t push to GitHub&lt;/h3&gt;
&lt;p&gt;One situation that I’ve frequently helped others with is when they use &lt;code&gt;git add *&lt;/code&gt; or &lt;code&gt;git add .&lt;/code&gt; and version control &lt;em&gt;every&lt;/em&gt; file in their project. They then do a commit such as &lt;code&gt;git commit -m &#34;added all files&#34;&lt;/code&gt; and run &lt;code&gt;git push&lt;/code&gt; to sync their files to GitHub. But oops, GitHub complains that you are trying to commit files larger than 50 Mb and even grinds to a halt if they are larger than 100 Mb. Which given that we work with large data, happens frequently (even a PDF file can be that big!).&lt;/p&gt;
&lt;p&gt;Ok, so what can you do at this point? Remember, this is the scenario where you &lt;strong&gt;just&lt;/strong&gt; made that commit. That is, it’s the last commit. At that point, it’s best to &lt;em&gt;undo your last git commit&lt;/em&gt; which is well described in &lt;a href=&#34;https://www.git-tower.com/learn/git/faq/undo-last-commit&#34;&gt;this website&lt;/a&gt;. However, when you &lt;em&gt;undo&lt;/em&gt; a commit, you can either fully wipe out any changes (wipe them out fully from your disk, not only &lt;code&gt;git&lt;/code&gt;’s version control!) or undo the version control step but also keep your files intact. The main solution then is to use:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git reset --soft HEAD~1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, maybe you tried other commands and it’s a bit more complicated than that. Which is why I greatly advise that you create a local backup of your &lt;code&gt;main_project&lt;/code&gt; directory before you dive into commands such as &lt;code&gt;git reset&lt;/code&gt;, specially whenever you see the &lt;code&gt;--hard&lt;/code&gt; option being suggested. That is, do something like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;## Nagivate to the parent directory of your main_project
cd directory_containing_your_project

## Check the full size of your project directory
du -sh main_project

## Do you have enough disk space?
df -h .

## If you have enough disk space, then create a full backup
cp -r main_project main_project_backup/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you are able to roll back the offending commit, instead of running &lt;code&gt;git add *&lt;/code&gt; or &lt;code&gt;git add .&lt;/code&gt; and similar commands, repeat the following cycle:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Check which files are not being version controlled (untracked) with &lt;code&gt;git status&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Check how big each of your untracked files is. You can do so with &lt;code&gt;ls -lh&lt;/code&gt; and &lt;code&gt;ls -lh some_pattern&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the files or file patterns you want to avoid version controlling (the large files) to your &lt;code&gt;.gitignore&lt;/code&gt; file &lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Double check that your pattern worked by confirming that these files do not show up as &lt;em&gt;untracked&lt;/em&gt; when you run &lt;code&gt;git status&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Repeat this until the only remaining untracked files are those you actually want to version control and that are small enough &lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And that’s it! Keep version controlling your code and reap the benefits later on when you need to.&lt;/p&gt;
&lt;iframe src=&#34;https://giphy.com/embed/KEXly2BwaldSlhY8BL&#34; width=&#34;480&#34; height=&#34;480&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;a href=&#34;https://giphy.com/gifs/latenightseth-seth-meyers-lnsm-late-night-with-KEXly2BwaldSlhY8BL&#34;&gt;via GIPHY&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;We all run into this situation at some point (or multiple times), so please keep using version control. The benefits will outweigh the negatives!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;use-case-story-the-issue&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Use case story: the issue&lt;/h3&gt;
&lt;p&gt;Thanks to a colleague who gave me permission to share their use case, here we can dive down into a real life example. First, this was their description (edited for anonymity):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ran these, as per GitHub’s instructions, and it went fine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git init
git add README.md
git commit -m &amp;quot;first commit&amp;quot;
git remote add origin git@github.com:LieberInstitute/some_repository.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Even added a &lt;code&gt;.gitignore&lt;/code&gt; with some instructions on what to ignore when committing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;But it wasn’t enough and I hadn’t come to appreciate yet that there’s no need to commit &lt;code&gt;.rda&lt;/code&gt;’s or other very large files, so my &lt;code&gt;git push&lt;/code&gt; died.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Since these were already staged, I thought the next move was to make another commit with an edited &lt;code&gt;.gitignore&lt;/code&gt; listing anything in my &lt;code&gt;rdas/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Putting me two branches ahead of master (Leo: commits I think)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I got frustrated and thought then that ok, I want to go back two commits…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;my Googling suggested me to go for &lt;code&gt;git reset --hard HEAD~2&lt;/code&gt;…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;That’s when I started panicking 😭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My colleague started panicking at this point because they couldn’t see the files anymore. That is, running &lt;code&gt;ls -lh rdas/&lt;/code&gt; didn’t list the files they had worked on really hard to create over the past months. But at this point, these large files were under version control by &lt;code&gt;git&lt;/code&gt; &lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;, just not available on &lt;code&gt;GitHub&lt;/code&gt; due to the file size limitations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So then my panic Googling took me to &lt;a href=&#34;https://stackoverflow.com/questions/5788037/recover-from-git-reset-hard&#34; class=&#34;uri&#34;&gt;https://stackoverflow.com/questions/5788037/recover-from-git-reset-hard&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;where I thought ok I just can run &lt;code&gt;git reset HEAD@{2}&lt;/code&gt; , which was&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;7cb9bac HEAD@{0}: reset: moving to HEAD@{2}
1e8499d HEAD@{1}: reset: moving to HEAD~2
f03b884 HEAD@{2}: commit: Committing EVERYTHING
7cb9bac HEAD@{3}: commit: Commiting EVERYTHING          &amp;lt;- this one
1e8499d HEAD@{4}: commit (initial): first commit&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;And there it looked like not everything was quite lost, as I could see&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ git status
# On branch master
# Your branch is ahead of &amp;#39;origin/master&amp;#39; by 1 commit.
#   (use &amp;quot;git push&amp;quot; to publish your local commits)
#
# Changes not staged for commit:
#   (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
#
#   deleted:    .RData
#   deleted:    .gitignore
#   deleted:    *.R ## Lots of files with this pattern
#   deleted:    *.sh ## same story about the file pattern
#   deleted:    pdfs/*.pdf
#   deleted:    rdas/*.rda
#   deleted:    tables/*.csv
#
# Untracked files:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
#
#   logs/
#   pdfs/*other*.pdf
#   rdas/*other*.rda
#   *other*.R
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now my colleague realizes that somehow &lt;code&gt;git&lt;/code&gt; is version controlling the files, but the &lt;code&gt;deleted&lt;/code&gt; label is still VERY scary!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And then I thought ok I just need to re-stage those deleted files…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;So I ran &lt;code&gt;git add -A&lt;/code&gt; , but now I see&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ git status
# On branch master
# Your branch is ahead of &amp;#39;origin/master&amp;#39; by 1 commit.
#   (use &amp;quot;git push&amp;quot; to publish your local commits)
#
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#   deleted:    .RData
#   deleted:    .gitignore
#   deleted:    *.R ## Lots of files with this pattern
#   deleted:    *.sh ## same story about the file pattern
#   deleted:    pdfs/*.pdf
#   deleted:    rdas/*.rda
#   deleted:    tables/*.csv
#   new file:   logs/*.Rout
#   new file:   logs/*.sh.*
#   new file:   pdfs/*other*.pdf
#   new file:   rdas/*other*.rda
#   new file:   *other*.R
#   renamed:    pdfs/*something*.pdf -&amp;gt; pdfs/*something_else*.pdf
#   renamed:    rdas/*something*.rda -&amp;gt; rdas/*something_else*.rda&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;and clearly I don’t know what I’m doing so I stopped&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;And thanked the lord you were online. 😭😭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I promise I did some reviewing of resources and testing with local and JHPCE test dirs before&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My colleague then pointed me to the directory with the files and we fixed their files.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;use-case-story-the-solution&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Use case story: the solution&lt;/h3&gt;
&lt;p&gt;Like I mentioned earlier, the first thing to do in cases like this is to create a backup.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;## Check how big it is
du -sh project_FINAL

## Create a backup
cp -r project_FINAL project_leo_backup/

## To wipe out the original copy
## proceed with EXTREME caution!
# rm -fr project_FINAL

## Then restore everything from your backup copy
cp -r project_leo_backup project_FINAL/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I actually messed up at one point and had to rely on this backup!! So, like I said,&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Please backup everything before you start using &lt;code&gt;git reset&lt;/code&gt; and similar commands!
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Next, to undo all the &lt;code&gt;git rm&lt;/code&gt; (deleting a file), I undid the &lt;code&gt;git add -A&lt;/code&gt; step using a combination of &lt;code&gt;git reset&lt;/code&gt; and &lt;code&gt;git checkout&lt;/code&gt; (to restore files).&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# https://stackoverflow.com/a/2125713/9374370
$ git reset HEAD
$ git checkout .

## check things
$ git status
On branch master
Your branch is ahead of &amp;#39;origin/master&amp;#39; by 1 commit.
  (use &amp;quot;git push&amp;quot; to publish your local commits)
nothing to commit, working tree clean
$ git log
commit 7cb9bac5378500b35a0c22480a5961248ecf67ea (HEAD -&amp;gt; master)
Author: xx &amp;lt;xx@jhmi.edu&amp;gt;
Date:   Tue Mar 17 19:27:31 2020 -0400
    Commiting EVERYTHING
commit 1e8499d7d41cab6c12ea23ccdb2da8120b00a7f7 (origin/master)
Author: XX &amp;lt;xx@jhmi.edu&amp;gt;
Date:   Tue Mar 17 19:04:03 2020 -0400
    first commit

$ ls -lh rdas
total 6.2G
## I see tons of stuff (many of which I&amp;#39;m now the &amp;quot;owner&amp;quot; of)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I then finally used &lt;code&gt;git reset --soft&lt;/code&gt; to undo the last commit.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# https://www.git-tower.com/learn/git/faq/undo-last-commit
git reset --soft HEAD~1 ## note that I&amp;#39;m not using --hard

## Everything is back to before that big commit
$ git log
commit 1e8499d7d41cab6c12ea23ccdb2da8120b00a7f7 (HEAD -&amp;gt; master, origin/master)
Author: XX &amp;lt;xx@jhmi.edu&amp;gt;
Date:   Tue Mar 17 19:04:03 2020 -0400
    first commit

## and the files are there =)
$ ls -lh rdas
total 6.2G
-rwxrwx--- 1 lcollado lieber_jaffe 690M Mar 18 00:22 *.rda ## exmaple file&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the directory and files have been restored to before all files were committed, we can proceed to ignore large files. For example, we can ignore the &lt;code&gt;rdas/&lt;/code&gt; directory that has many large files that we don’t want to version control &lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ git status
On branch master
Your branch is up to date with &amp;#39;origin/master&amp;#39;.

Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git restore &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
    modified:   README.md

Untracked files:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
    .RData
    .gitignore
    *.R ## Lots of files with this pattern
    *.sh ## Lots of files with this pattern
    pdfs/
    rdas/
    tables/

$ echo &amp;quot;rdas&amp;quot; &amp;gt;&amp;gt; .gitignore

## Notice that rdas is not there anymore ^^
$ git status
On branch master
Your branch is up to date with &amp;#39;origin/master&amp;#39;.

Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git restore &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
    modified:   README.md

Untracked files:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
    .RData
    .gitignore
    *.R ## Lots of files with this pattern
    *.sh ## Lots of files with this pattern
    pdfs/
    tables/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can update our &lt;code&gt;.gitignore&lt;/code&gt; and push this small change (ignoring the &lt;code&gt;rdas/&lt;/code&gt; directory) to GitHub.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ git add .gitignore

$ git commit -m &amp;quot;Ignore rdas&amp;quot;
[master 52f1850] Ignore rdas
 1 file changed, 14 insertions(+)
 create mode 100755 .gitignore

$ git push
X11 forwarding request failed on channel 0
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 20 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 420 bytes | 210.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To github.com:LieberInstitute/some_repository.git
   1e8499d..52f1850  master -&amp;gt; master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we are done!&lt;/p&gt;
&lt;iframe src=&#34;https://giphy.com/embed/wzD3nQPA4gqHK&#34; width=&#34;480&#34; height=&#34;360&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;a href=&#34;https://giphy.com/gifs/time-office-wzD3nQPA4gqHK&#34;&gt;via GIPHY&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;And I’ll get some free beers hehe 🍻😄&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Omg you’re amazing beautiful lord n savior jesus christ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Your next 10 beers are on me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;plus 2 for the promotion 😄😇😎🙏😭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To which I replied&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hehe, I’ve simply only have had more practice at this than you (fixing xx’s repos mostly hehe)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;but yeah, backing up is the best thing you can do&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;that actually &lt;strong&gt;saved&lt;/strong&gt; me from my one &lt;code&gt;git reset --hard HEAD~1&lt;/code&gt; command that should have &lt;code&gt;been git reset --soft HEAD~1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;misc-notes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Misc notes&lt;/h3&gt;
&lt;p&gt;Note that you might also want to use &lt;code&gt;git status-size&lt;/code&gt; in some situations.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;## From https://github.com/jtloong/git-status-size
$ git status-size&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, if you are a &lt;a href=&#34;https://jhpce.jhu.edu/&#34;&gt;JHPCE&lt;/a&gt; user, I recommend including these lines in your &lt;code&gt;~/.bashrc&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;## Load the git module by default when qrsh/qsub
## thanks to Jiong Yang
if [[ $HOSTNAME == compute-* ]]; then
    echo &amp;quot;Adding LIBD modules&amp;quot;
    module use /jhpce/shared/jhpce/modulefiles/libd
    echo &amp;quot;Loading git&amp;quot;
    module load git
    module load git-status-size/github
    module load git-lfs/2.8.0
    module load rmate/1.5.9 ## macOS users
    module load conda_R/3.6.x ## default R version
fi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;acknowledgments&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Acknowledgments&lt;/h3&gt;
&lt;p&gt;I greatly appreciate the anonymous user who reached out to me about this issue and had an excellent history of commands which allowed me to figure out a possible solution and then write this blog post (with their permission). We both hope that this information will be useful to ourselves and others in the future.&lt;/p&gt;
&lt;p&gt;This blog post was made possible thanks to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://bioconductor.org/packages/3.10/BiocStyle&#34;&gt;BiocStyle&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Oles_2020&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://github.com/Bioconductor/BiocStyle&#39;&gt;Oleś, Morgan, and Huber, 2020&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=blogdown&#34;&gt;blogdown&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Xie_2017&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://github.com/rstudio/blogdown&#39;&gt;Xie, Hill, and Thomas, 2017&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=knitcitations&#34;&gt;knitcitations&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Boettiger_2019&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://CRAN.R-project.org/package=knitcitations&#39;&gt;Boettiger, 2019&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=sessioninfo&#34;&gt;sessioninfo&lt;/a&gt;&lt;/em&gt; &lt;a id=&#39;cite-Csardi_2018&#39;&gt;&lt;/a&gt;(&lt;a href=&#39;https://CRAN.R-project.org/package=sessioninfo&#39;&gt;Csárdi, core, Wickham, Chang, et al., 2018&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Boettiger_2019&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Boettiger_2019&#34;&gt;[1]&lt;/a&gt;&lt;cite&gt;
C. Boettiger.
&lt;em&gt;knitcitations: Citations for ‘Knitr’ Markdown Files&lt;/em&gt;.
R package version 1.0.10.
2019.
URL: &lt;a href=&#34;https://CRAN.R-project.org/package=knitcitations&#34;&gt;https://CRAN.R-project.org/package=knitcitations&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Csardi_2018&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Csardi_2018&#34;&gt;[2]&lt;/a&gt;&lt;cite&gt;
G. Csárdi, R. core, H. Wickham, W. Chang, et al.
&lt;em&gt;sessioninfo: R Session Information&lt;/em&gt;.
R package version 1.1.1.
2018.
URL: &lt;a href=&#34;https://CRAN.R-project.org/package=sessioninfo&#34;&gt;https://CRAN.R-project.org/package=sessioninfo&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Oles_2020&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Oles_2020&#34;&gt;[3]&lt;/a&gt;&lt;cite&gt;
A. Oleś, M. Morgan, and W. Huber.
&lt;em&gt;BiocStyle: Standard styles for vignettes and other Bioconductor documents&lt;/em&gt;.
R package version 2.14.4.
2020.
URL: &lt;a href=&#34;https://github.com/Bioconductor/BiocStyle&#34;&gt;https://github.com/Bioconductor/BiocStyle&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a id=&#39;bib-Xie_2017&#39;&gt;&lt;/a&gt;&lt;a href=&#34;#cite-Xie_2017&#34;&gt;[4]&lt;/a&gt;&lt;cite&gt;
Y. Xie, A. P. Hill, and A. Thomas.
&lt;em&gt;blogdown: Creating Websites with R Markdown&lt;/em&gt;.
ISBN 978-0815363729.
Boca Raton, Florida: Chapman and Hall/CRC, 2017.
URL: &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;https://github.com/rstudio/blogdown&lt;/a&gt;.&lt;/cite&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reproducibility&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reproducibility&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;## ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────
##  setting  value                       
##  version  R version 3.6.3 (2020-02-29)
##  os       macOS Catalina 10.15.3      
##  system   x86_64, darwin15.6.0        
##  ui       X11                         
##  language (EN)                        
##  collate  en_US.UTF-8                 
##  ctype    en_US.UTF-8                 
##  tz       America/New_York            
##  date     2020-03-18                  
## 
## ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────
##  package       * version date       lib source                            
##  assertthat      0.2.1   2019-03-21 [1] CRAN (R 3.6.0)                    
##  bibtex          0.4.2.2 2020-01-02 [1] CRAN (R 3.6.0)                    
##  BiocManager     1.30.10 2019-11-16 [1] CRAN (R 3.6.1)                    
##  BiocStyle     * 2.14.4  2020-01-09 [1] Bioconductor                      
##  blogdown        0.18    2020-03-04 [1] CRAN (R 3.6.0)                    
##  bookdown        0.18    2020-03-05 [1] CRAN (R 3.6.0)                    
##  cli             2.0.2   2020-02-28 [1] CRAN (R 3.6.0)                    
##  colorout      * 1.2-1   2019-05-07 [1] Github (jalvesaq/colorout@7ea9440)
##  crayon          1.3.4   2017-09-16 [1] CRAN (R 3.6.0)                    
##  digest          0.6.25  2020-02-23 [1] CRAN (R 3.6.0)                    
##  evaluate        0.14    2019-05-28 [1] CRAN (R 3.6.0)                    
##  fansi           0.4.1   2020-01-08 [1] CRAN (R 3.6.0)                    
##  glue            1.3.2   2020-03-12 [1] CRAN (R 3.6.0)                    
##  htmltools       0.4.0   2019-10-04 [1] CRAN (R 3.6.0)                    
##  httr            1.4.1   2019-08-05 [1] CRAN (R 3.6.0)                    
##  jsonlite        1.6.1   2020-02-02 [1] CRAN (R 3.6.0)                    
##  knitcitations * 1.0.10  2019-09-15 [1] CRAN (R 3.6.0)                    
##  knitr           1.28    2020-02-06 [1] CRAN (R 3.6.0)                    
##  lubridate       1.7.4   2018-04-11 [1] CRAN (R 3.6.0)                    
##  magrittr        1.5     2014-11-22 [1] CRAN (R 3.6.0)                    
##  plyr            1.8.6   2020-03-03 [1] CRAN (R 3.6.2)                    
##  R6              2.4.1   2019-11-12 [1] CRAN (R 3.6.1)                    
##  Rcpp            1.0.3   2019-11-08 [1] CRAN (R 3.6.0)                    
##  RefManageR      1.2.12  2019-04-03 [1] CRAN (R 3.6.0)                    
##  rlang           0.4.5   2020-03-01 [1] CRAN (R 3.6.0)                    
##  rmarkdown       2.1     2020-01-20 [1] CRAN (R 3.6.0)                    
##  sessioninfo   * 1.1.1   2018-11-05 [1] CRAN (R 3.6.0)                    
##  stringi         1.4.6   2020-02-17 [1] CRAN (R 3.6.0)                    
##  stringr         1.4.0   2019-02-10 [1] CRAN (R 3.6.0)                    
##  withr           2.1.2   2018-03-15 [1] CRAN (R 3.6.0)                    
##  xfun            0.12    2020-01-13 [1] CRAN (R 3.6.0)                    
##  xml2            1.2.5   2020-03-11 [1] CRAN (R 3.6.0)                    
##  yaml            2.2.1   2020-02-01 [1] CRAN (R 3.6.0)                    
## 
## [1] /Library/Frameworks/R.framework/Versions/3.6/Resources/library&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Between our personal computers and the JHPCE cluster, but also with collaborators and the community at large.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Note that you can also create &lt;code&gt;.gitignore&lt;/code&gt; files inside each directory if you want to have tighter control. You could also ignore a full directory and the use &lt;code&gt;git add -f&lt;/code&gt; to forcibly version control files, for example, &lt;code&gt;echo &#34;my_subdir&#34; &amp;gt;&amp;gt; .gitignore&lt;/code&gt; plus &lt;code&gt;git add -f my_subdir/*.R&lt;/code&gt; to forcibly version control the R script files inside &lt;code&gt;my_subdir&lt;/code&gt; but ignore everything else.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;If you really want to version control large files, look into &lt;a href=&#34;https://git-lfs.github.com/&#34;&gt;&lt;code&gt;git lfs&lt;/code&gt;&lt;/a&gt;.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;Stored and hidden in some way inside the &lt;code&gt;.git&lt;/code&gt; directory.&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;Maybe later we’ll version control a few of them using &lt;code&gt;git add -f rdas/some_file.rda&lt;/code&gt; but it’ll be a targeted version control command.&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Reading an R file from GitHub</title>
      <link>/2013/05/09/reading-an-r-file-from-github/</link>
      <pubDate>Thu, 09 May 2013 00:00:00 +0000</pubDate>
      <guid>/2013/05/09/reading-an-r-file-from-github/</guid>
      <description>&lt;p&gt;Lets say that I want to read in &lt;a href=&#34;https://github.com/lcolladotor/ballgownR-devel/blob/master/ballgownR/R/infoGene.R&#34;&gt;this R file&lt;/a&gt; from GitHub into R.&lt;/p&gt;
&lt;p&gt;The first thing you have to do is locate the raw file. You can do so by clicking on the &lt;strong&gt;Raw&lt;/strong&gt; button in GitHub. In this case it&amp;#8217;s &lt;a href=&#34;https://raw.github.com/lcolladotor/ballgownR-devel/master/ballgownR/R/infoGene.R&#34;&gt;&lt;a href=&#34;https://raw.github.com/lcolladotor/ballgownR-devel/master/ballgownR/R/infoGene.R&#34;&gt;https://raw.github.com/lcolladotor/ballgownR-devel/master/ballgownR/R/infoGene.R&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One would think that using &lt;code&gt;source()&lt;/code&gt; would work, but it doesn&amp;#8217;t as shown below:&lt;/p&gt;
```r
source(&#34;https://raw.github.com/lcolladotor/ballgownR-devel/master/ballgownR/R/infoGene.R&#34;)
```
```r
## Warning: unsupported URL scheme
```
```r
## Error: cannot open the connection
```
&lt;p&gt;However, thanks again to Hadley Wickham you can do so by using the &lt;code&gt;devtools&lt;/code&gt; (&lt;span class=&#34;showtooltip&#34; title=&#34;Wickham H and Chang W (2013). devtools: Tools to make developing R code easier. R package version 1.2.&#34;&gt;&lt;a href=&#34;http://CRAN.R-project.org/package=devtools&#34;&gt;Wickham &amp;amp; Chang, 2013&lt;/a&gt;&lt;/span&gt; ) package.&lt;/p&gt;
&lt;p&gt;Here is how it works:&lt;/p&gt;
```r
library(devtools)
library(roxygen2)
## Needed because this file has roxygen2 comments. Otherwise you get a
## &#39;could not find function &#39;digest&#39;&#39; error
source_url(&#34;https://raw.github.com/lcolladotor/ballgownR-devel/master/ballgownR/R/infoGene.R&#34;)
```
```r
## SHA-1 hash of file is 6c32a620799eded5d6ff0997a184843d7964724a
```
```r
## Note that you can specify the SHA-1 hash to be very specific about
## which version of the file you want to read in.
```
&lt;p&gt;We can then check that &lt;code&gt;infoGene&lt;/code&gt; has actually been sourced:&lt;/p&gt;
```r
&#34;infoGene&#34; %in% ls()
```
```r
## [1] TRUE
```
&lt;p&gt;That&amp;#8217;s it! Enjoy!&lt;/p&gt;
&lt;p&gt;Citations made with &lt;code&gt;knitcitations&lt;/code&gt; (&lt;span class=&#34;showtooltip&#34; title=&#34;Boettiger C (2013). knitcitations: Citations for knitr markdown files. R package version 0.4-6.&#34;&gt;&lt;a href=&#34;https://github.com/cboettig/knitcitations&#34;&gt;Boettiger, 2013&lt;/a&gt;&lt;/span&gt; ).&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Hadley Wickham, Winston Chang, (2013) devtools: Tools to make developing R code easier. &lt;a href=&#34;http://CRAN.R-project.org/package=devtools&#34;&gt;&lt;a href=&#34;http://CRAN.R-project.org/package=devtools&#34;&gt;http://CRAN.R-project.org/package=devtools&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Carl Boettiger, (2013) knitcitations: Citations for knitr markdown files. &lt;a href=&#34;https://github.com/cboettig/knitcitations&#34;&gt;&lt;a href=&#34;https://github.com/cboettig/knitcitations&#34;&gt;https://github.com/cboettig/knitcitations&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Reproducibility&lt;/p&gt;
```r
sessionInfo()
```
```r
## R version 3.0.0 (2013-04-03)
## Platform: x86_64-apple-darwin10.8.0 (64-bit)
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] roxygen2_2.2.2      digest_0.6.3        devtools_1.2       
## [4] knitcitations_0.4-6 bibtex_0.3-5        knitr_1.2          
## 
## loaded via a namespace (and not attached):
##  [1] brew_1.0-6     evaluate_0.4.3 formatR_0.7    httr_0.2      
##  [5] memoise_0.1    parallel_3.0.0 RCurl_1.95-4.1 stringr_0.6.2 
##  [9] tools_3.0.0    whisker_0.3-2  XML_3.95-0.2   xtable_1.7-1
```
</description>
    </item>
    
  </channel>
</rss>
