<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cluster on L. Collado-Torres</title>
    <link>http://lcolladotor.github.io/tags/cluster/</link>
    <description>Recent content in Cluster on L. Collado-Torres</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2011-2018 Leonardo Collado Torres under (CC) BY-NC-SA 4.0</copyright>
    <lastBuildDate>Wed, 11 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://lcolladotor.github.io/tags/cluster/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Login to the cluster, request a node and change to your project directory in a single command</title>
      <link>http://lcolladotor.github.io/2013/12/11/quick-cluster-login-to-interactive-session/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013/12/11/quick-cluster-login-to-interactive-session/</guid>
      <description>

&lt;p&gt;To be able to do RNA-seq research work in large multi-sample studies you have to be able to analyze large files and thus frequently use a powerful computing environment. In my case, this means that I have to login to a &lt;a href=&#34;http://en.wikipedia.org/wiki/Computer_cluster&#34; target=&#34;_blank&#34;&gt;computing cluster&lt;/a&gt; frequently. This is a common task for other biostatisticians (like those that do brain imagining studies) and many other people. When I am working on a project, I generally have to login to the cluster and then change the directory to the location where I have my project files.&lt;/p&gt;

&lt;p&gt;A local cluster is normally composed of a login machine (enigma2 in my case) from where you can request to work on a node. There are several options for controlling this process of requesting a node, and in our institution we use a &lt;a href=&#34;http://en.wikipedia.org/wiki/Oracle_Grid_Engine&#34; target=&#34;_blank&#34;&gt;Sun/Oracle Grid Engine&lt;/a&gt;. When a cluster has a lot of users, you want to dedicate the login machine as much as possible to handling login requests and assigning nodes for people to use. This means that you want to minimize doing any other kind of operations on the login machine, such as input/output operations.&lt;/p&gt;

&lt;h2 id=&#34;basic-workflow&#34;&gt;Basic workflow&lt;/h2&gt;

&lt;p&gt;This means that the steps I normally follow before getting to work on my project are:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## Open the terminal
## Login to enigma
ssh username@enigma2.etc.edu

## Request a node to work on interactively
qrsh

## Change to the directory where I have my project files
cd projectDir

## Done!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a long time I have used an &lt;a href=&#34;http://en.wikipedia.org/wiki/Alias_(command)&#34; target=&#34;_blank&#34;&gt;alias&lt;/a&gt; for the login step. I have this alias in my local &lt;code&gt;.bashrc&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## In local .bashrc file
alias enigma=&amp;quot;ssh username@enigma2.etc.edu&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thus saving a tiny bit of typing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## Open terminal
## Login to enigma
enigma
## Etc
qrsh
cd projectDir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the &lt;code&gt;projectDir&lt;/code&gt; gets complicated, I make an &lt;code&gt;alias&lt;/code&gt; on my &lt;code&gt;.bashrc&lt;/code&gt; file on the cluster. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## In cluster .bashrc file
alias pdir=&amp;quot;cd /very/complicated/path/to/projectDir/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, I can accomplish the setup task with minimal typing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## Open terminal
enigma
qrsh
pdir
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-ssh-config&#34;&gt;Using ssh config&lt;/h2&gt;

&lt;p&gt;This section was added after Kasper Hansen&#39;s comment.&lt;/p&gt;

&lt;p&gt;You can edit the ~.ssh/config file (check &lt;a href=&#34;http://www.howtogeek.com/75007/stupid-geek-tricks-use-your-ssh-config-file-to-create-aliases-for-hosts/&#34; target=&#34;_blank&#34;&gt;how to set it up&lt;/a&gt;, &lt;a href=&#34;http://nerderati.com/2011/03/simplify-your-life-with-an-ssh-config-file/&#34; target=&#34;_blank&#34;&gt;explained differently&lt;/a&gt; and the &lt;a href=&#34;http://linux.die.net/man/5/ssh_config&#34; target=&#34;_blank&#34;&gt;manual&lt;/a&gt;) to make things even better. This is how mine looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
Host enigma
	User username
    Hostname enigma2.etc.edu
	ForwardX11 yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like the ssh &lt;code&gt;-X&lt;/code&gt; (or &lt;code&gt;-Y&lt;/code&gt;) option so I can later view plots in X11 when running &lt;code&gt;R&lt;/code&gt;. That is why the &lt;strong&gt;ForwardX11&lt;/strong&gt; option is present.&lt;/p&gt;

&lt;p&gt;Then you can use the following command to ssh into the cluster.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
ssh enigma
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you prefer, simplify the bash alias to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## In local .bashrc file
alias enigma=&amp;quot;ssh enigma&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sections below have been edited to assume that you are configured the &lt;strong&gt;enigma&lt;/strong&gt; host shortcut in your ~.ssh/config file.&lt;/p&gt;

&lt;h2 id=&#34;needed-a-new-strategy&#34;&gt;Needed a new strategy&lt;/h2&gt;

&lt;p&gt;The previous strategy works and I had been very comfortable with it. However, at times you might forget to request a node from the cluster to do your work interactively. This is specially true for me when I only plan on using a few &lt;code&gt;git&lt;/code&gt; commands. But when many users forget this, it becomes a problem and our cluster manager had to send us a reminder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*ALWAYS* work on a cluster node rather than on enigma2.
Enigma2 is a *single machine* with many people trying to use it to gain access to the cluster.
Even for tar commands, cp commands, wc commands ... first qrsh to a node.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;profiles-in-iterm2-http-www-iterm2-com&#34;&gt;Profiles in &lt;a href=&#34;http://www.iterm2.com/&#34; target=&#34;_blank&#34;&gt;iTerm2&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Just a few days after we got this reminder, I decided to take a look at the &lt;a href=&#34;http://www.iterm2.com/&#34; target=&#34;_blank&#34;&gt;iTerm2&lt;/a&gt; profile menu. There are plenty of options for customizing your terminal, but the ones I mainly ended up using are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Working directory&lt;/code&gt; -&amp;gt; &lt;code&gt;Directory :&lt;/code&gt; -&amp;gt; choose a directory in my laptop. Generally the location of my &lt;code&gt;git&lt;/code&gt; repository for version controlling the code of a given project.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Command&lt;/code&gt; -&amp;gt; &lt;code&gt;Send text at start&lt;/code&gt; -&amp;gt; an alias from my local &lt;code&gt;.bashrc&lt;/code&gt; file as shown in the image below (the alias is &lt;strong&gt;qr&lt;/strong&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;http://lcolladotor.github.io/figs/2013-12-11-quick-cluster-login-to-interactive-session/iTerm2-profile-cluster.png&#34;&gt;&lt;img src=&#34;http://lcolladotor.github.io/figs/2013-12-11-quick-cluster-login-to-interactive-session/iTerm2-profile-cluster.png&#34; alt=&#34;iTerm2 cluster profile screenshot&#34; style=&#34;width: 400px;&#34;/&gt;&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The first case above is nice, but the real power comes from the second case. Since I can pretty much evaluate any command, I asked myself if I could set up a profile that automatically logs in to the cluster? Can it also request a node interactively? And even go to my project directory?&lt;/p&gt;

&lt;h2 id=&#34;cluster-qr-alias&#34;&gt;cluster &lt;code&gt;qr&lt;/code&gt; alias&lt;/h2&gt;

&lt;p&gt;I then remembered that &lt;a href=&#34;https://github.com/syounkin&#34; target=&#34;_blank&#34;&gt;Samuel Younkin&lt;/a&gt; explained to us how to set up &lt;strong&gt;qrsh&lt;/strong&gt; to automatically change the directory to the directory from which you invoked &lt;strong&gt;qrsh&lt;/strong&gt; (&lt;span class=&#34;showtooltip&#34; title=&#34;(2013). &#39;BiocHopkins.&#39; .&#34;&gt;&lt;a href=&#34;http://bit.ly/19zLZeD&#34;&gt;Younkin, 2013&lt;/a&gt;&lt;/span&gt;). I modified things a little bit and saved this qrsh version as the &lt;code&gt;qr&lt;/code&gt; alias on the cluster:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## In cluster .bashrc file

## change dir automatically when using qrsh
## Details: https://github.com/rkostadi/BiocHopkins/wiki/Useless-Tips-&amp;amp;-Code-Snippets
if [ -f ~/.bash_pwd ]; then
    source ~/.bash_pwd
    rm ~/.bash_pwd
fi
alias qr=&#39;echo &amp;quot;cd $PWD&amp;quot; &amp;gt; ~/.bash_pwd; history -w; qrsh&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that I tried using the &lt;code&gt;qrsh -ac&lt;/code&gt; option, but couldn&#39;t get to pass a variable. Doing so in theory would remove the need to create the &lt;strong&gt;.bash_pwd&lt;/strong&gt; temporary file.&lt;/p&gt;

&lt;h2 id=&#34;ssh-and-change-dir-in-one-command&#34;&gt;ssh and change dir in one command&lt;/h2&gt;

&lt;p&gt;Then googling I found how to &lt;strong&gt;ssh&lt;/strong&gt; and change directory in one command (&lt;span class=&#34;showtooltip&#34; title=&#34;Frosty (2009). &#39;How can I ssh directly to a particular directory?&#39; .&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/626533/how-can-i-ssh-directly-to-a-particular-directory&#34;&gt;Frosty, 2009&lt;/a&gt;&lt;/span&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
ssh -t enigma &#39;cd /very/complicated/path/to/projectDir/; bash&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem I soon encountered was that I couldn&#39;t &lt;strong&gt;qrsh&lt;/strong&gt; right after because the command was not been found. Some setup files are not been read even after using &lt;code&gt;bash -l&lt;/code&gt; like shown here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
ssh -t enigma &#39;cd /very/complicated/path/to/projectDir/; bash -l&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;local-qr-alias&#34;&gt;local &lt;code&gt;qr&lt;/code&gt; alias&lt;/h2&gt;

&lt;p&gt;With our cluster administrator&#39;s help, I was finally able to find how to do all of this in a single command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## Requires the code by Sam Younkin to work (or the version I modified)
ssh -t enigma &#39;cd /very/complicated/path/to/projectDir/; source /etc/profile; echo &amp;quot;cd $PWD&amp;quot; &amp;gt; ~/.bash_pwd; history -w; qrsh&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I created the &lt;code&gt;qr&lt;/code&gt; alias in my local machine. This alias:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;performs the ssh connection to the login machine of our cluster (enigma2),&lt;/li&gt;
&lt;li&gt;then changes the directory to the project directory,&lt;/li&gt;
&lt;li&gt;loads the necessary setup files so &lt;strong&gt;qrsh&lt;/strong&gt; can be found on the path,&lt;/li&gt;
&lt;li&gt;creates the temporary &lt;strong&gt;.bash_pwd&lt;/strong&gt; file (you could even make this more concise by echoing the directory of interest to the temp file),&lt;/li&gt;
&lt;li&gt;saves the command history as recommended by &lt;a href=&#34;https://github.com/syounkin&#34; target=&#34;_blank&#34;&gt;Samuel Younkin&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;requests an interactive node (with your default settings) by executing &lt;strong&gt;qrsh&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## In local .bashrc file

# qrsh
alias qr=&amp;quot;ssh -t enigma &#39;cd /very/complicated/path/to/projectDir/; source /etc/profile; echo \&amp;quot;cd \$PWD\&amp;quot; &amp;gt; ~/.bash_pwd; qrsh&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the use of the backslash to delay the execution of &lt;code&gt;$PWD&lt;/code&gt;. I want it to be executed on the cluster, not on my local machine.&lt;/p&gt;

&lt;h2 id=&#34;glory&#34;&gt;Glory!&lt;/h2&gt;

&lt;p&gt;So now using &lt;a href=&#34;http://www.iterm2.com/&#34; target=&#34;_blank&#34;&gt;iTerm2&lt;/a&gt; I can simply use the shortcut for my &lt;em&gt;cluster&lt;/em&gt; profile which runs the local &lt;code&gt;qr&lt;/code&gt; alias and the next thing I have is a terminal with an interactive session on the cluster and located in my project directory. Sweet! =)&lt;/p&gt;

&lt;p&gt;Plus I also have the cluster &lt;code&gt;qr&lt;/code&gt; alias for doing what &lt;a href=&#34;https://github.com/syounkin&#34; target=&#34;_blank&#34;&gt;Samuel Younkin&lt;/a&gt; previously described.&lt;/p&gt;

&lt;h3 id=&#34;can-do-it-better&#34;&gt;Can do it better?&lt;/h3&gt;

&lt;p&gt;If you have suggestions on how to improve this, let me know!&lt;/p&gt;

&lt;h3 id=&#34;extra-aliases&#34;&gt;Extra aliases&lt;/h3&gt;

&lt;p&gt;The following two aliases take your local current directory basename and use it for accessing /very/complicated/path/to/projectDir/&lt;strong&gt;basename&lt;/strong&gt;. This is useful if you use an organization similar to mine:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Projects dir

&lt;ul&gt;
&lt;li&gt;Project 1 dir&lt;/li&gt;
&lt;li&gt;Project 2 dir
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full paths are different in my computer and in the cluster, but once you are in  /very/complicated/path/to/projectDir/
it is all the same on both locations.&lt;/p&gt;

&lt;p&gt;The first one runs &lt;strong&gt;qrsh&lt;/strong&gt; while the second one doesn&#39;t request a node for interactive work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## In local .bashrc file

## qrsh-basename
alias qs=&#39;LEODIR=`basename $PWD`; ssh -t enigma &amp;quot;cd /very/complicated/path/to/projectDir/$LEODIR/; source /etc/profile; echo \&amp;quot;cd \$PWD\&amp;quot; &amp;gt; ~/.bash_pwd; history -w; qrsh&amp;quot;&#39;
## basename, but no qrsh
alias qq=&#39;LEODIR=`basename $PWD`; ssh -t enigma &amp;quot;cd /very/complicated/path/to/projectDir/$LEODIR/; source /etc/profile; echo \&amp;quot;cd \$PWD\&amp;quot; &amp;gt; ~/.bash_pwd; history -w; bash&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;p&gt;Citations made with &lt;code&gt;knitcitations&lt;/code&gt; (&lt;span class=&#34;showtooltip&#34; title=&#34;Boettiger C (2013). knitcitations: Citations for knitr markdown files. R package version 0.4-7.&#34;&gt;&lt;a href=&#34;http://CRAN.R-project.org/package=knitcitations&#34;&gt;Boettiger, 2013&lt;/a&gt;&lt;/span&gt;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frosty,   (2009) How can I ssh directly to a particular directory?.  &lt;em&gt;How can I ssh directly to a particular directory? - Stack Overflow&lt;/em&gt;  &lt;a href=&#34;http://stackoverflow.com/questions/626533/how-can-i-ssh-directly-to-a-particular-directory&#34; target=&#34;_blank&#34;&gt;http://stackoverflow.com/questions/626533/how-can-i-ssh-directly-to-a-particular-directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BiocHopkins.  &lt;em&gt;GitHub&lt;/em&gt;  &lt;a href=&#34;http://bit.ly/19zLZeD&#34; target=&#34;_blank&#34;&gt;http://bit.ly/19zLZeD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Carl Boettiger,   (2013) knitcitations: Citations for knitr markdown files.  &lt;a href=&#34;http://CRAN.R-project.org/package=knitcitations&#34; target=&#34;_blank&#34;&gt;http://CRAN.R-project.org/package=knitcitations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recap&#34;&gt;Recap&lt;/h3&gt;

&lt;p&gt;If you got lost, these are the basic modifications you need to make to your local and cluster &lt;code&gt;.bashrc&lt;/code&gt; files.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/lcolladotor/7897221.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Check the history of this post &lt;a href=&#34;https://github.com/lcolladotor/lcolladotor.github.com/commits/master/_posts/2013-12-11-quick-cluster-login-to-interactive-session.md&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using plyr and doMC for quick and easy apply-family functions</title>
      <link>http://lcolladotor.github.io/2013/04/26/using-plyr-and-domc-for-quick-and-easy-apply-family/</link>
      <pubDate>Fri, 26 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013/04/26/using-plyr-and-domc-for-quick-and-easy-apply-family/</guid>
      <description>&lt;p&gt;A few weeks back I dedicated a short amount of time to actually read what &lt;code&gt;plyr&lt;/code&gt; (&lt;span class=&#34;showtooltip&#34; title=&#34;Wickham H (2011). The Split-Apply-Combine Strategy for Data
Analysis. _Journal of Statistical Software_, *40*(1), pp. 1-29.
 http://www.jstatsoft.org/v40/i01/.&#34;&gt;&lt;a href=&#34;http://www.jstatsoft.org/v40/i01/&#34;&gt;Wickham, 2011&lt;/a&gt;&lt;/span&gt;) is about and I was surprised. The whole idea behind &lt;code&gt;plyr&lt;/code&gt; is very simple: expand the &lt;code&gt;apply()&lt;/code&gt; family to do things easy. &lt;code&gt;plyr&lt;/code&gt; has many functions whose name ends with &lt;code&gt;ply&lt;/code&gt; which is short of apply. Then, the functions are identified by two letters before &lt;code&gt;ply&lt;/code&gt; which are abbreviations for the input (first letter) and output (second one). For instance, &lt;code&gt;ddply&lt;/code&gt; takes an input a &lt;code&gt;data.frame&lt;/code&gt; and returns a &lt;code&gt;data.frame&lt;/code&gt; while &lt;code&gt;ldply&lt;/code&gt; takes as input a &lt;code&gt;list&lt;/code&gt; and returns a &lt;code&gt;data.frame&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The syntax is pretty straight forward. For example, here are the arguments for &lt;code&gt;ddply&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(plyr)
args(ddply)
## function (.data, .variables, .fun = NULL, ..., .progress = &amp;quot;none&amp;quot;, 
##     .inform = FALSE, .drop = TRUE, .parallel = FALSE, .paropts = NULL) 
## NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we basically have to specify are&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;.data&lt;/code&gt; which in general is the name of the input &lt;code&gt;data.frame&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.variables&lt;/code&gt; which is a vector (note the use of the &lt;code&gt;.&lt;/code&gt; function) of variable names. In this case, &lt;code&gt;ddply&lt;/code&gt; is very useful for applying some function to subsets of the data as specified by these variables,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.fun&lt;/code&gt; which is the actual function we want to run,&lt;/li&gt;
&lt;li&gt;and &lt;code&gt;...&lt;/code&gt; which are parameter options for the function we are running.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;From the &lt;code&gt;ddply&lt;/code&gt; help page we have the following examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dfx &amp;lt;- data.frame(
  group = c(rep(&#39;A&#39;, 8), rep(&#39;B&#39;, 15), rep(&#39;C&#39;, 6)),
  sex = sample(c(&amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;), size = 29, replace = TRUE),
  age = runif(n = 29, min = 18, max = 54)
)

# Note the use of the &#39;.&#39; function to allow
# group and sex to be used without quoting
ddply(dfx, .(group, sex), summarize,
 mean = round(mean(age), 2),
 sd = round(sd(age), 2))
##   group sex  mean    sd
## 1     A   F 40.48 12.72
## 2     A   M 34.48 15.28
## 3     B   F 36.05  9.98
## 4     B   M 38.35  7.97
## 5     C   F 20.04  1.86
## 6     C   M 43.81 10.72

# An example using a formula for .variables
ddply(baseball[1:100, ], ~year, nrow)

##   year V1
## 1 1871  7
## 2 1872 13
## 3 1873 13
## 4 1874 15
## 5 1875 17
## 6 1876 15
## 7 1877 17
## 8 1878  3

# Applying two functions; nrow and ncol
ddply(baseball, .(lg), c(&amp;quot;nrow&amp;quot;, &amp;quot;ncol&amp;quot;))

##   lg  nrow ncol
## 1       65   22
## 2 AA   171   22
## 3 AL 10007   22
## 4 FL    37   22
## 5 NL 11378   22
## 6 PL    32   22
## 7 UA     9   22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this is not the end of the story! Something I really liked about &lt;code&gt;plyr&lt;/code&gt; is that it can be parallelized via the &lt;code&gt;foreach&lt;/code&gt; (&lt;span class=&#34;showtooltip&#34; title=&#34;Analytics R (2012). _foreach: Foreach looping construct for R_. R
package version 1.4.0, 
http://CRAN.R-project.org/package=foreach.&#34;&gt;&lt;a href=&#34;http://CRAN.R-project.org/package=foreach&#34;&gt;Analytics, 2012&lt;/a&gt;&lt;/span&gt;) package. I don&amp;#8217;t know much about &lt;code&gt;foreach&lt;/code&gt;, but all I learnt is that you have to use other packages such as &lt;code&gt;doMC&lt;/code&gt; (&lt;span class=&#34;showtooltip&#34; title=&#34;Analytics R (2013). _doMC: Foreach parallel adaptor for the
multicore package_. R package version 1.3.0, 
http://CRAN.R-project.org/package=doMC.&#34;&gt;&lt;a href=&#34;http://CRAN.R-project.org/package=doMC&#34;&gt;Analytics, 2013&lt;/a&gt;&lt;/span&gt;) to actually run the code. It&amp;#8217;s like &lt;code&gt;foreach&lt;/code&gt; specifies the infraestructure to communicate in parallel (and split jobs) and packages like &lt;code&gt;doMC&lt;/code&gt; tailor it for specific environments like for running in multi-core.&lt;/p&gt;
&lt;p&gt;Running things in parallel can then be very easy. Basically, you load the packages, specify the number of cores, and run your &lt;code&gt;ply&lt;/code&gt; function. Here is a short example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Load packages
library(plyr)
library(doMC)

## Loading required package: foreach
## Loading required package: iterators
## Loading required package: parallel

## Specify the number of cores
registerDoMC(4)

## Check how many cores we are using
getDoParWorkers()
## [1] 4

## Run your ply function
ddply(dfx, .(group, sex), summarize, mean = round(mean(age), 2), sd = round(sd(age), 
    2), .parallel = TRUE)

##   group sex  mean    sd
## 1     A   F 40.48 12.72
## 2     A   M 34.48 15.28
## 3     B   F 36.05  9.98
## 4     B   M 38.35  7.97
## 5     C   F 20.04  1.86
## 6     C   M 43.81 10.72
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case that you are interested, here is a short shell script for knitting an Rmd file in the cluster and specifying the appropriate number of cores to then use &lt;code&gt;plyr&lt;/code&gt; and &lt;code&gt;doMC&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash 
# To run it in the current working directory
#$ -cwd 
# To get an email after the job is done
#$ -m e 
# To speficy that we want 4 cores
#$ -pe local 4
# The name of the job
#$ -N myPlyJob

echo &amp;quot;**** Job starts ****&amp;quot;
date

# Knit your file: assuming it&#39;s called FileToKnit.Rmd
Rscript -e &amp;quot;library(knitr); knit2html(&#39;FileToKnit.Rmd&#39;)&amp;quot;

echo &amp;quot;**** Job ends ****&amp;quot;
date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets say that the bash script is named &lt;code&gt;script.sh&lt;/code&gt;. Then you can submit it to the cluster queue using&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
qsub script.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p&gt;This is what I used to re-format a large &lt;code&gt;data.frame&lt;/code&gt; in a few minutes in the cluster for the &lt;a href=&#34;https://twitter.com/search?q=%23jhsph753&amp;amp;src=typd&#34;&gt;#jhsph753&lt;/a&gt; class homework project.&lt;/p&gt;
&lt;p&gt;So, thank you again &lt;a href=&#34;https://twitter.com/hadleywickham&#34;&gt;Hadley Wickham&lt;/a&gt; for making awesome R packages!&lt;/p&gt;
&lt;p&gt;Citations made with &lt;code&gt;knitcitations&lt;/code&gt; (&lt;span class=&#34;showtooltip&#34; title=&#34;Boettiger C (2013). _knitcitations: Citations for knitr markdown
files_. R package version 0.4-4, 
https://github.com/cboettig/knitcitations.&#34;&gt;&lt;a href=&#34;https://github.com/cboettig/knitcitations&#34;&gt;Boettiger, 2013&lt;/a&gt;&lt;/span&gt;).&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Revolution Analytics, (2013) doMC: Foreach parallel adaptor for the multicore package. &lt;a href=&#34;http://CRAN.R-project.org/package=doMC&#34;&gt;&lt;a href=&#34;http://CRAN.R-project.org/package=doMC&#34;&gt;http://CRAN.R-project.org/package=doMC&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Revolution Analytics, (2012) foreach: Foreach looping construct for R. &lt;a href=&#34;http://CRAN.R-project.org/package=foreach&#34;&gt;&lt;a href=&#34;http://CRAN.R-project.org/package=foreach&#34;&gt;http://CRAN.R-project.org/package=foreach&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Carl Boettiger, knitcitations: Citations for knitr markdown files. &lt;a href=&#34;https://github.com/cboettig/knitcitations&#34;&gt;&lt;a href=&#34;https://github.com/cboettig/knitcitations&#34;&gt;https://github.com/cboettig/knitcitations&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hadley Wickham, (2011) The Split-Apply-Combine Strategy for Data Analysis. &lt;em&gt;Journal of Statistical Software&lt;/em&gt; &lt;strong&gt;40&lt;/strong&gt; (1) &lt;a href=&#34;http://www.jstatsoft.org/v40/i01/&#34;&gt;&lt;a href=&#34;http://www.jstatsoft.org/v40/i01/&#34;&gt;http://www.jstatsoft.org/v40/i01/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
